-- phpMyAdmin SQL Dump
-- version 4.6.6deb4
-- https://www.phpmyadmin.net/
--
-- Host: localhost:3306
-- Erstellungszeit: 17. Mai 2019 um 09:48
-- Server-Version: 10.1.37-MariaDB-0+deb9u1
-- PHP-Version: 7.0.33-0+deb9u1

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Datenbank: `homeserver`
--

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `featureclasses`
--

CREATE TABLE `featureclasses` (
  `id` int(11) NOT NULL,
  `classId` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `guiControl` varchar(255) NOT NULL,
  `guiControlFunctions` int(11) NOT NULL,
  `smoketest` varchar(255) NOT NULL,
  `view` varchar(30) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `featureclasses`
--

INSERT INTO `featureclasses` (`id`, `classId`, `name`, `guiControl`, `guiControlFunctions`, `smoketest`, `view`) VALUES
(1, 16, 'Taster', '', 0, '', 'Standard'),
(2, 32, 'Temperatursensor', 'tempControl.php', 0, '', 'Standard'),
(17, 20, 'LogicalButton', '', 0, '', 'Standard'),
(8, 19, 'Schalter', 'switchControl.php', 0, 'schalterSmoketest.php', 'Standard'),
(9, 17, 'Dimmer', 'dimmerControl.php', 25, 'dimmerSmoketest.php', 'Standard'),
(14, 18, 'Rollladen', 'rolloControl.php', 0, 'rollosSmoketest.php', 'Standard'),
(12, 0, 'Controller', '', 0, 'controllerSmoketest.php', 'Standard'),
(15, 15, 'DigitalPort', '', 0, '', 'Standard'),
(22, 161, 'KnxLine', '', 0, '', 'Entwickler'),
(18, 21, 'Led', 'ledControl.php', 0, '', 'Standard'),
(19, 33, 'IR-Sensor', '', 0, '', 'Standard'),
(20, 160, 'DaliLine', '', 0, '', 'Entwickler'),
(21, 162, 'Ethernet', '', 0, '', 'Standard'),
(-1, -1, 'Unbekanntes Feature', '', 0, '', 'Standard'),
(23, 34, 'Feuchtesensor', '', 0, '', 'Standard'),
(24, 1, 'PC-Server', '', 0, '', 'Standard'),
(25, 2, 'Wetter', '', 0, '', 'Standard'),
(26, 14, 'ModbusSlave', '', 0, '', 'Standard'),
(27, 176, 'Gateway', '', 0, '', 'Entwickler'),
(28, 35, 'Counter', '', 0, '', 'Standard'),
(29, 163, 'SnmpAgent', '', 0, '', 'Standard'),
(30, 3, 'SystemTime', '', 0, '', 'Experte'),
(31, 90, 'CurrentReader', '', 0, '', 'Standard'),
(32, 91, 'TcpClient', '', 0, '', 'Standard'),
(33, 164, 'WiFi', '', 0, '', 'Standard');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `featurefunctionbitmasks`
--

CREATE TABLE `featurefunctionbitmasks` (
  `id` int(11) NOT NULL,
  `featureFunctionId` int(11) NOT NULL,
  `paramId` int(11) NOT NULL,
  `bit` tinyint(4) NOT NULL,
  `name` varchar(150) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `featurefunctionbitmasks`
--

INSERT INTO `featurefunctionbitmasks` (`id`, `featureFunctionId`, `paramId`, `bit`, `name`) VALUES
(17, 40, 74, 0, 'logicalButton0'),
(18, 40, 74, 1, 'logicalButton1'),
(19, 40, 74, 2, 'logicalButton2'),
(20, 40, 74, 3, 'logicalButton3'),
(21, 40, 74, 4, 'logicalButton4'),
(22, 40, 74, 5, 'logicalButton5'),
(23, 40, 74, 6, 'logicalButton6'),
(24, 40, 74, 7, 'logicalButton7'),
(25, 34, 71, 0, 'logicalButton0'),
(26, 34, 71, 1, 'logicalButton1'),
(27, 34, 71, 2, 'logicalButton2'),
(28, 34, 71, 3, 'logicalButton3'),
(29, 34, 71, 4, 'logicalButton4'),
(30, 34, 71, 5, 'logicalButton5'),
(31, 34, 71, 6, 'logicalButton6'),
(32, 34, 71, 7, 'logicalButton7'),
(33, 75, 128, 0, 'led0'),
(34, 75, 128, 1, 'led1'),
(35, 75, 128, 2, 'led2'),
(36, 75, 128, 3, 'led3'),
(37, 75, 128, 4, 'led4'),
(38, 75, 128, 5, 'led5'),
(39, 75, 128, 6, 'led6'),
(40, 75, 128, 7, 'led7'),
(41, 75, 210, 0, 'button0'),
(42, 75, 210, 1, 'button1'),
(43, 75, 210, 2, 'button2'),
(44, 75, 210, 3, 'button3'),
(45, 75, 210, 4, 'button4'),
(46, 75, 210, 5, 'button5'),
(47, 75, 210, 6, 'button6'),
(48, 75, 210, 7, 'button7'),
(49, 76, 129, 0, 'led0'),
(50, 76, 129, 1, 'led1'),
(51, 76, 129, 2, 'led2'),
(52, 76, 129, 3, 'led3'),
(53, 76, 129, 4, 'led4'),
(54, 76, 129, 5, 'led5'),
(55, 76, 129, 6, 'led6'),
(56, 76, 129, 7, 'led7'),
(65, 141, 252, 0, 'notifyOnCovered'),
(66, 141, 252, 1, 'notifyOnClicked'),
(67, 141, 252, 2, 'notifyOnStartHold'),
(68, 141, 252, 3, 'notifyOnEndHold'),
(69, 141, 252, 4, 'notifyOnDoubleClicked'),
(70, 141, 252, 5, 'notifyOnFree'),
(71, 141, 252, 6, 'reserved'),
(72, 141, 252, 7, 'enableFeedBack'),
(73, 16, 13, 0, 'notifyOnCovered'),
(74, 16, 13, 1, 'notifyOnClicked'),
(75, 16, 13, 2, 'notifyOnDoubleClicked'),
(76, 16, 13, 3, 'notifyOnStartHold'),
(77, 16, 13, 4, 'notifyOnEndHold'),
(78, 16, 13, 5, 'notifyOnFree'),
(79, 16, 13, 6, 'reserved'),
(80, 16, 13, 7, 'enableFeedBack'),
(81, 42, 79, 0, 'notifyOnCovered'),
(82, 42, 79, 1, 'notifyOnClicked'),
(83, 42, 79, 2, 'notifyOnDoubleClicked'),
(84, 42, 79, 3, 'notifyOnStartHold'),
(85, 42, 79, 4, 'notifyOnEndHold'),
(86, 42, 79, 5, 'notifyOnFree'),
(87, 42, 79, 6, 'reserved'),
(88, 42, 79, 7, 'enableFeedBack'),
(89, 34, 313, 0, ''),
(90, 34, 313, 1, ''),
(91, 34, 313, 2, ''),
(92, 34, 313, 3, ''),
(93, 34, 313, 4, ''),
(94, 34, 313, 5, ''),
(95, 34, 313, 6, ''),
(96, 34, 313, 7, ''),
(105, 178, 361, 0, 'SEND_TRIGGERED_RULE_EVENT'),
(106, 178, 361, 1, 'READ_ONLY_GATEWAYS'),
(107, 178, 361, 2, 'REPORT_GATEWAY_LOAD'),
(108, 178, 361, 3, ''),
(109, 178, 361, 4, ''),
(110, 178, 361, 5, ''),
(111, 178, 361, 6, ''),
(112, 178, 361, 7, ''),
(113, 82, 370, 0, 'inverted'),
(114, 82, 370, 1, 'independent'),
(115, 82, 370, 2, ''),
(116, 82, 370, 3, ''),
(117, 82, 370, 4, ''),
(118, 82, 370, 5, ''),
(119, 82, 370, 6, ''),
(120, 82, 370, 7, ''),
(121, 55, 371, 0, 'inverted'),
(122, 55, 371, 1, 'independent'),
(123, 55, 371, 2, ''),
(124, 55, 371, 3, ''),
(125, 55, 371, 4, ''),
(126, 55, 371, 5, ''),
(127, 55, 371, 6, ''),
(128, 55, 371, 7, ''),
(129, 168, 373, 0, 'BUS_STATE 0=Unknown, 1=IDLE'),
(130, 168, 373, 1, 'BUS_STATE 2=OWNER, 3=BUSY'),
(131, 168, 373, 2, 'BUSERR: Bus Error'),
(132, 168, 373, 3, 'ARBLOST: Arbitration Lost'),
(133, 168, 373, 4, 'RXACK: Received Acknowledge'),
(134, 168, 373, 5, 'CLKHOLD: Clock Hold'),
(135, 168, 373, 6, 'WIF: Write Interrupt Flag'),
(136, 168, 373, 7, 'RIF: Read Interrupt Flag'),
(137, 168, 374, 0, 'AP: Slave Address or Stop'),
(138, 168, 374, 1, 'DIR: Read/Write Direction'),
(139, 168, 374, 2, 'BUSERR: TWI Slave Bus Error'),
(140, 168, 374, 3, 'COLL: Collision'),
(141, 168, 374, 4, 'RXACK: Received Acknowledge'),
(142, 168, 374, 5, 'CLKHOLD: Clock Hold'),
(143, 168, 374, 6, 'APIF: Address/Stop Interrupt Flag'),
(144, 168, 374, 7, 'DIF: Data Interrupt Flag'),
(145, 162, 403, 0, 'HomeautomationOnlyMode'),
(146, 162, 403, 1, 'ModBusTcp'),
(147, 162, 403, 2, 'DHCP'),
(148, 162, 403, 3, 'SNMP'),
(149, 162, 403, 4, ''),
(150, 162, 403, 5, ''),
(151, 162, 403, 6, ''),
(152, 162, 403, 7, ''),
(153, 161, 404, 0, 'HomeautomationOnlyMode'),
(154, 161, 404, 1, 'ModBusTcp'),
(155, 161, 404, 2, 'DHCP'),
(156, 161, 404, 3, 'SNMP'),
(157, 161, 404, 4, ''),
(158, 161, 404, 5, ''),
(159, 161, 404, 6, ''),
(160, 161, 404, 7, ''),
(161, 203, 408, 0, 'invert'),
(162, 203, 408, 1, 'driveOnState'),
(163, 203, 408, 2, 'driveOffState'),
(164, 203, 408, 3, 'reserved3'),
(165, 203, 408, 4, 'reserved4'),
(166, 203, 408, 5, 'reserved5'),
(167, 203, 408, 6, 'reserved6'),
(168, 203, 408, 7, 'reserved7'),
(169, 104, 410, 0, 'invert'),
(170, 104, 410, 1, 'driveOnState'),
(171, 104, 410, 2, 'driveOffState'),
(172, 104, 410, 3, 'reserved3'),
(173, 104, 410, 4, 'reserved4'),
(174, 104, 410, 5, 'reserved5'),
(175, 104, 410, 6, 'reserved6'),
(176, 104, 410, 7, 'reserved7'),
(177, 99, 412, 0, 'invert'),
(178, 99, 412, 1, 'driveOnState'),
(179, 99, 412, 2, 'driveOffState'),
(180, 99, 412, 3, 'reserved3'),
(181, 99, 412, 4, 'reserved4'),
(182, 99, 412, 5, 'reserved5'),
(183, 99, 412, 6, 'reserved6'),
(184, 99, 412, 7, 'reserved7'),
(185, 205, 416, 0, 'invert'),
(186, 205, 416, 1, 'driveOnState'),
(187, 205, 416, 2, 'driveOffState'),
(188, 205, 416, 3, 'reserved3'),
(189, 205, 416, 4, 'reserved4'),
(190, 205, 416, 5, 'reserved5'),
(191, 205, 416, 6, 'reserved6'),
(192, 205, 416, 7, 'reserved7'),
(193, 240, 0, 0, 'enableSignalEvent'),
(194, 240, 0, 1, 'enableCurrentEvent'),
(195, 240, 0, 2, 'enableInterruptEvent'),
(196, 240, 0, 3, 'enableDebugEvent'),
(197, 240, 0, 4, ''),
(198, 240, 0, 5, ''),
(199, 240, 0, 6, ''),
(200, 240, 0, 7, ''),
(201, 242, 0, 0, 'enableSignalEvent'),
(202, 242, 0, 1, 'enableCurrentEvent'),
(203, 242, 0, 2, 'enableInterruptEvent'),
(204, 242, 0, 3, 'enableDebugEvent'),
(205, 242, 0, 4, ''),
(206, 242, 0, 5, ''),
(207, 242, 0, 6, ''),
(208, 242, 0, 7, ''),
(209, 255, 0, 0, 'invalidSignalLength'),
(210, 255, 0, 1, 'firmwareUpdateFinished'),
(211, 255, 0, 2, 'mainLoopTooLong'),
(212, 255, 0, 3, 'gotMultipleEvents'),
(213, 240, 0, 0, 'enableSignalEvent'),
(214, 240, 0, 1, 'enableCurrentEvent'),
(215, 240, 0, 2, 'enableInterruptEvent'),
(216, 240, 0, 3, 'enableDebugEvent'),
(217, 240, 0, 4, ''),
(218, 240, 0, 5, ''),
(219, 240, 0, 6, ''),
(220, 240, 0, 7, ''),
(221, 242, 0, 0, 'enableSignalEvent'),
(222, 242, 0, 1, 'enableCurrentEvent'),
(223, 242, 0, 2, 'enableInterruptEvent'),
(224, 242, 0, 3, 'enableDebugEvent'),
(225, 242, 0, 4, ''),
(226, 242, 0, 5, ''),
(227, 242, 0, 6, ''),
(228, 242, 0, 7, ''),
(229, 255, 0, 0, 'invalidSignalLength'),
(230, 255, 0, 1, 'firmwareUpdateFinished'),
(231, 255, 0, 2, 'mainLoopTooLong'),
(232, 255, 0, 3, 'gotMultipleEvents'),
(241, 217, 502, 0, 'enabled'),
(242, 217, 502, 1, 'reserved1'),
(243, 217, 502, 2, 'reserved2'),
(244, 217, 502, 3, 'reserved3'),
(245, 217, 502, 4, 'reserved4'),
(246, 217, 502, 5, 'reserved5'),
(247, 217, 502, 6, 'reserved6'),
(248, 217, 502, 7, 'reserved7'),
(249, 221, 503, 0, 'enabled'),
(250, 221, 503, 1, 'reserved1'),
(251, 221, 503, 2, 'reserved2'),
(252, 221, 503, 3, 'reserved3'),
(253, 221, 503, 4, 'reserved4'),
(254, 221, 503, 5, 'reserved5'),
(255, 221, 503, 6, 'reserved6'),
(256, 221, 503, 7, 'reserved7'),
(257, 240, 0, 0, 'enableSignalEvent'),
(258, 240, 0, 1, 'enableCurrentEvent'),
(259, 240, 0, 2, 'enableInterruptEvent'),
(260, 240, 0, 3, 'enableDebugEvent'),
(261, 240, 0, 4, ''),
(262, 240, 0, 5, ''),
(263, 240, 0, 6, ''),
(264, 240, 0, 7, ''),
(265, 242, 0, 0, 'enableSignalEvent'),
(266, 242, 0, 1, 'enableCurrentEvent'),
(267, 242, 0, 2, 'enableInterruptEvent'),
(268, 242, 0, 3, 'enableDebugEvent'),
(269, 242, 0, 4, ''),
(270, 242, 0, 5, ''),
(271, 242, 0, 6, ''),
(272, 242, 0, 7, ''),
(273, 255, 0, 0, 'invalidSignalLength'),
(274, 255, 0, 1, 'firmwareUpdateFinished'),
(275, 255, 0, 2, 'mainLoopTooLong'),
(276, 255, 0, 3, 'gotMultipleEvents'),
(277, 240, 0, 0, 'enableSignalEvent'),
(278, 240, 0, 1, 'enableCurrentEvent'),
(279, 240, 0, 2, 'enableInterruptEvent'),
(280, 240, 0, 3, 'enableDebugEvent'),
(281, 240, 0, 4, ''),
(282, 240, 0, 5, ''),
(283, 240, 0, 6, ''),
(284, 240, 0, 7, ''),
(285, 242, 0, 0, 'enableSignalEvent'),
(286, 242, 0, 1, 'enableCurrentEvent'),
(287, 242, 0, 2, 'enableInterruptEvent'),
(288, 242, 0, 3, 'enableDebugEvent'),
(289, 242, 0, 4, ''),
(290, 242, 0, 5, ''),
(291, 242, 0, 6, ''),
(292, 242, 0, 7, ''),
(293, 255, 0, 0, 'invalidSignalLength'),
(294, 255, 0, 1, 'firmwareUpdateFinished'),
(295, 255, 0, 2, 'mainLoopTooLong'),
(296, 255, 0, 3, 'gotMultipleEvents');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `featurefunctionenums`
--

CREATE TABLE `featurefunctionenums` (
  `id` int(11) NOT NULL,
  `featureFunctionId` int(11) NOT NULL,
  `paramId` int(11) NOT NULL,
  `name` varchar(100) NOT NULL,
  `value` varchar(50) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `featurefunctionenums`
--

INSERT INTO `featurefunctionenums` (`id`, `featureFunctionId`, `paramId`, `name`, `value`) VALUES
(96, 31, 257, 'INSTALLED', '1'),
(95, 31, 257, 'RUNNING', '0'),
(81, 143, 256, 'INVALID_RULE_TABLE', '3'),
(80, 143, 256, 'MEMORY_WRITE_FAILED', '2'),
(17, 23, 87, 'DIMM_CR', '0'),
(18, 23, 87, 'DIMM_L', '1'),
(79, 143, 256, 'MODULE_NOT_EXISTS', '1'),
(39, 73, 127, 'OK', '0'),
(31, 64, 115, 'TOGGLE', '0'),
(24, 47, 113, 'TO_LIGHT', '1'),
(29, 47, 113, 'TO_DARK', '255'),
(54, 33, 68, 'MS6', '2'),
(32, 64, 115, 'TO_DARK', '255'),
(40, 73, 127, 'LOCKED', '1'),
(78, 143, 256, 'NO_ERROR', '0'),
(51, 52, 142, 'TO_CLOSE', '1'),
(50, 52, 142, 'TOGGLE', '0'),
(53, 33, 68, 'AR8', '1'),
(59, 81, 181, 'OFF', '0'),
(47, 45, 93, 'DIMM_CR', '0'),
(48, 45, 93, 'DIMM_L', '1'),
(55, 64, 115, 'TO_LIGHT', '1'),
(56, 105, 171, 'OFF', '0'),
(57, 105, 171, 'ON', '1'),
(58, 105, 171, 'BLINK', '2'),
(60, 81, 181, 'ON', '1'),
(82, 143, 256, 'SYNTAX_ERROR', '4'),
(64, 118, 191, 'NO_ZERO_CROSS_DETECTED', '1'),
(65, 118, 191, 'INVALID_PERIOD', '2'),
(66, 131, 204, 'PowerOn', '1'),
(67, 131, 204, 'External', '2'),
(68, 131, 204, 'BrownOut', '4'),
(69, 131, 204, 'Watchdog', '8'),
(70, 131, 204, 'Debug', '16'),
(71, 131, 204, 'Software', '32'),
(72, 139, 249, 'OFF', '0'),
(73, 139, 249, 'ON', '1'),
(74, 139, 249, 'BLINK', '2'),
(100, 131, 204, 'Unknown', '0'),
(76, 121, 194, 'NO_LED', '0'),
(77, 121, 194, 'NO_BUTTON', '1'),
(83, 143, 256, 'NULL_POINTER', '5'),
(84, 143, 256, 'LOW_VOLTAGE', '6'),
(85, 143, 256, 'WATCHDOG', '7'),
(86, 143, 256, 'INVALID_FW_LOADED', '8'),
(87, 143, 256, 'MSG_QUEUE_OVERRUN', '9'),
(88, 143, 256, 'CHECKSUM_ERROR', '16'),
(94, 143, 256, 'CHECKSUM_ERROR_CONF_EEPROM', '18'),
(93, 143, 256, 'CHECKSUM_ERROR_CONF_FLASH', '17'),
(116, 168, 307, 'NO_ERROR', '0'),
(99, 52, 142, 'TO_OPEN', '255'),
(121, 164, 306, 'READ_FAILED', '2'),
(120, 164, 306, 'WRITE_FAILED', '1'),
(119, 164, 306, 'NO_ERROR', '0'),
(118, 168, 307, 'READ_FAILED', '2'),
(117, 168, 307, 'WRITE_FAILED', '1'),
(532, 168, 307, 'RESET_BUS', '6'),
(123, 34, 187, 'UNUSED', '0'),
(125, 34, 187, 'DIMMER', '1'),
(127, 34, 187, 'SOCKET', '2'),
(129, 34, 187, 'SHUTTER', '3'),
(130, 40, 316, 'UNUSED', '0'),
(131, 40, 316, 'DIMMER', '1'),
(132, 40, 316, 'SOCKET', '2'),
(133, 40, 316, 'SHUTTER', '3'),
(134, 40, 317, 'UNUSED', '0'),
(135, 40, 317, 'DIMMER', '1'),
(136, 40, 317, 'SOCKET', '2'),
(137, 40, 317, 'SHUTTER', '3'),
(139, 40, 318, 'UNUSED', '0'),
(141, 40, 319, 'UNUSED', '0'),
(142, 40, 320, 'UNUSED', '0'),
(143, 40, 321, 'UNUSED', '0'),
(144, 40, 322, 'UNUSED', '0'),
(145, 40, 323, 'UNUSED', '0'),
(146, 40, 318, 'DIMMER', '1'),
(147, 40, 319, 'DIMMER', '1'),
(149, 40, 320, 'DIMMER', '1'),
(151, 40, 321, 'DIMMER', '1'),
(153, 40, 322, 'DIMMER', '1'),
(154, 40, 323, 'DIMMER', '1'),
(156, 40, 318, 'SOCKET', '2'),
(158, 40, 319, 'SOCKET', '2'),
(160, 40, 321, 'SOCKET', '2'),
(162, 40, 322, 'SOCKET', '2'),
(164, 40, 318, 'SHUTTER', '3'),
(166, 40, 319, 'SHUTTER', '3'),
(168, 40, 320, 'SOCKET', '2'),
(170, 40, 320, 'SHUTTER', '3'),
(172, 40, 321, 'SHUTTER', '3'),
(174, 40, 322, 'SHUTTER', '3'),
(175, 40, 323, 'SOCKET', '2'),
(176, 40, 323, 'SHUTTER', '3'),
(178, 34, 188, 'UNUSED', '0'),
(180, 34, 205, 'UNUSED', '0'),
(181, 34, 309, 'UNUSED', '0'),
(182, 34, 310, 'UNUSED', '0'),
(183, 34, 311, 'UNUSED', '0'),
(184, 34, 312, 'UNUSED', '0'),
(186, 34, 189, 'UNUSED', '0'),
(188, 34, 188, 'DIMMER', '1'),
(190, 34, 189, 'DIMMER', '1'),
(192, 34, 205, 'DIMMER', '1'),
(193, 34, 309, 'DIMMER', '1'),
(195, 34, 310, 'DIMMER', '1'),
(197, 34, 311, 'DIMMER', '1'),
(198, 34, 312, 'DIMMER', '1'),
(199, 127, 200, 'OK', '0'),
(200, 127, 200, 'START_FAIL', '1'),
(201, 127, 200, 'FAILTURE', '2'),
(202, 127, 200, 'CRC_FAILTURE', '3'),
(203, 127, 200, 'OUT_OF_MEMORY', '4'),
(204, 168, 307, 'MSG_QUEUE_OVERRUN', '3'),
(205, 164, 306, 'MSG_QUEUE_OVERRUN', '3'),
(207, 75, 128, 'UNUSED', '255'),
(209, 75, 128, 'TASTER', '16'),
(545, 118, 191, 'INVALID_MODE', '3'),
(215, 75, 128, 'SCHALTER', '19'),
(217, 75, 128, 'LED', '21'),
(219, 75, 128, 'OW_BUS', '32'),
(221, 75, 128, 'IR_SENSOR', '33'),
(223, 75, 128, 'DHT_SENSOR', '34'),
(225, 75, 210, 'UNUSED', '255'),
(227, 75, 210, 'TASTER', '16'),
(230, 75, 210, 'SCHALTER', '19'),
(231, 75, 210, 'LED', '21'),
(232, 75, 210, 'OW_BUS', '32'),
(233, 75, 210, 'SENSOR', '33'),
(234, 75, 210, 'DHT_SENSOR', '34'),
(235, 75, 336, 'UNUSED', '255'),
(236, 75, 336, 'TASTER', '16'),
(239, 75, 336, 'SCHALTER', '19'),
(240, 75, 336, 'LED', '21'),
(241, 75, 336, 'OW_BUS', '32'),
(242, 75, 336, 'IR_SENSOR', '33'),
(243, 75, 336, 'DHT_SENSOR', '34'),
(244, 75, 337, 'UNUSED', '255'),
(245, 75, 337, 'TASTER', '16'),
(248, 75, 337, 'SCHALTER', '19'),
(249, 75, 337, 'LED', '21'),
(250, 75, 337, 'OW_BUS', '32'),
(251, 75, 337, 'IR_SENSOR', '33'),
(252, 75, 337, 'DHT_SENSOR', '34'),
(253, 75, 338, 'UNUSED', '255'),
(254, 75, 338, 'TASTER', '16'),
(257, 75, 338, 'SCHALTER', '19'),
(258, 75, 338, 'LED', '21'),
(259, 75, 338, 'OW_BUS', '32'),
(260, 75, 338, 'IR_SENSOR', '33'),
(261, 75, 338, 'DHT_SENSOR', '34'),
(262, 75, 339, 'UNUSED', '255'),
(263, 75, 339, 'TASTER', '16'),
(266, 75, 339, 'SCHALTER', '19'),
(267, 75, 339, 'LED', '21'),
(268, 75, 339, 'OW_BUS', '32'),
(269, 75, 339, 'IR_SENSOR', '33'),
(270, 75, 339, 'DHT_SENSOR', '34'),
(271, 75, 340, 'UNUSED', '255'),
(272, 75, 340, 'TASTER', '16'),
(275, 75, 340, 'SCHALTER', '19'),
(276, 75, 340, 'LED', '21'),
(277, 75, 340, 'OW_BUS', '32'),
(278, 75, 340, 'IR_SENSOR', '33'),
(279, 75, 340, 'DHT_SENSOR', '34'),
(280, 75, 341, 'UNUSED', '255'),
(281, 75, 341, 'TASTER', '16'),
(284, 75, 341, 'SCHALTER', '19'),
(285, 75, 341, 'LED', '21'),
(286, 75, 341, 'OW_BUS', '32'),
(287, 75, 341, 'IR_SENSOR', '33'),
(288, 75, 341, 'DHT_SENSOR', '34'),
(289, 76, 129, 'UNUSED', '255'),
(290, 76, 129, 'TASTER', '16'),
(293, 76, 129, 'SCHALTER', '19'),
(294, 76, 129, 'LED', '21'),
(295, 76, 129, 'OW_BUS', '32'),
(296, 76, 129, 'IR_SENSOR', '33'),
(297, 76, 129, 'DHT_SENSOR', '34'),
(400, 76, 342, 'UNUSED', '255'),
(401, 76, 342, 'TASTER', '16'),
(404, 76, 342, 'SCHALTER', '19'),
(405, 76, 342, 'LED', '21'),
(406, 76, 342, 'OW_BUS', '32'),
(407, 76, 342, 'IR_SENSOR', '33'),
(408, 76, 342, 'DHT_SENSOR', '34'),
(409, 76, 343, 'UNUSED', '255'),
(410, 76, 343, 'TASTER', '16'),
(413, 76, 343, 'SCHALTER', '19'),
(414, 76, 343, 'LED', '21'),
(415, 76, 343, 'OW_BUS', '32'),
(416, 76, 343, 'IR_SENSOR', '33'),
(417, 76, 343, 'DHT_SENSOR', '34'),
(418, 76, 344, 'UNUSED', '255'),
(419, 76, 344, 'TASTER', '16'),
(422, 76, 344, 'SCHALTER', '19'),
(423, 76, 344, 'LED', '21'),
(424, 76, 344, 'OW_BUS', '32'),
(425, 76, 344, 'IR_SENSOR', '33'),
(426, 76, 344, 'DHT_SENSOR', '34'),
(427, 76, 345, 'UNUSED', '255'),
(428, 76, 345, 'TASTER', '16'),
(431, 76, 345, 'SCHALTER', '19'),
(432, 76, 345, 'LED', '21'),
(433, 76, 345, 'OW_BUS', '32'),
(434, 76, 345, 'IR_SENSOR', '33'),
(435, 76, 345, 'DHT_SENSOR', '34'),
(436, 76, 346, 'UNUSED', '255'),
(437, 76, 346, 'TASTER', '16'),
(440, 76, 346, 'SCHALTER', '19'),
(441, 76, 346, 'LED', '21'),
(442, 76, 346, 'OW_BUS', '32'),
(443, 76, 346, 'IR_SENSOR', '33'),
(444, 76, 346, 'DHT_SENSOR', '34'),
(445, 76, 347, 'UNUSED', '255'),
(446, 76, 347, 'TASTER', '16'),
(449, 76, 347, 'SCHALTER', '19'),
(450, 76, 347, 'LED', '21'),
(451, 76, 347, 'OW_BUS', '32'),
(452, 76, 347, 'IR_SENSOR', '33'),
(453, 76, 347, 'DHT_SENSOR', '34'),
(454, 76, 348, 'UNUSED', '255'),
(455, 76, 348, 'TASTER', '16'),
(526, 143, 256, 'CHECKSUM_ERROR_CONFIGURATION', '19'),
(458, 76, 348, 'SCHALTER', '19'),
(459, 76, 348, 'LED', '21'),
(460, 76, 348, 'OW_BUS', '32'),
(461, 76, 348, 'IR_SENSOR', '33'),
(462, 76, 348, 'DHT_SENSOR', '34'),
(463, 57, 350, 'TOGGLE', '0'),
(464, 57, 350, 'TO_CLOSE', '1'),
(465, 57, 350, 'TO_OPEN', '255'),
(467, 34, 189, 'SOCKET', '2'),
(469, 34, 188, 'SOCKET', '2'),
(471, 34, 188, 'SHUTTER', '3'),
(472, 34, 189, 'SHUTTER', '3'),
(473, 34, 205, 'SOCKET', '2'),
(474, 34, 309, 'SOCKET', '2'),
(476, 34, 310, 'SOCKET', '2'),
(478, 34, 311, 'SOCKET', '2'),
(479, 34, 312, 'SOCKET', '2'),
(481, 34, 205, 'SHUTTER', '3'),
(483, 34, 309, 'SHUTTER', '3'),
(485, 34, 310, 'SHUTTER', '3'),
(487, 34, 311, 'SHUTTER', '3'),
(488, 34, 312, 'SHUTTER', '3'),
(489, 126, 199, 'PIN0_FUNCTION_NOT_SUPPORTED', '16'),
(490, 126, 199, 'PIN1_FUNCTION_NOT_SUPPORTED', '17'),
(491, 126, 199, 'PIN2_FUNCTION_NOT_SUPPORTED', '18'),
(492, 126, 199, 'PIN3_FUNCTION_NOT_SUPPORTED', '19'),
(493, 126, 199, 'PIN4_FUNCTION_NOT_SUPPORTED', '20'),
(494, 126, 199, 'PIN5_FUNCTION_NOT_SUPPORTED', '21'),
(495, 126, 199, 'PIN6_FUNCTION_NOT_SUPPORTED', '22'),
(496, 126, 199, 'PIN7_FUNCTION_NOT_SUPPORTED', '23'),
(527, 168, 307, 'BUSY_BUS', '4'),
(528, 164, 306, 'BUSY_BUS', '4'),
(529, 164, 306, 'MSG_POOL_LEVEL_TOO_HIGH', '5'),
(530, 168, 307, 'MSG_POOL_LEVEL_TOO_HIGH', '5'),
(533, 182, 362, 'BUS_HUNG', '1'),
(534, 182, 362, 'NOT_PRESENT', '2'),
(535, 182, 362, 'ACK_TOO_LONG', '3'),
(536, 182, 362, 'SYNC_TIMEOUT', '4'),
(537, 182, 362, 'DATA_TIMEOUT', '5'),
(538, 182, 362, 'CHECKSUM_ERROR', '6'),
(540, 73, 127, 'ABORTED', '2'),
(541, 73, 127, 'STOPPED', '3'),
(542, 73, 127, 'INVALID', '255'),
(543, 23, 87, 'SWITCH', '2'),
(544, 45, 93, 'SWITCH', '2'),
(546, 118, 191, 'DEFECT', '4'),
(547, 188, 372, 'FALSE', '0'),
(548, 188, 372, 'TRUE', '1'),
(549, 188, 372, 'INVERT', '2'),
(551, 40, 316, 'DOUBLE_SWITCH', '7'),
(553, 40, 317, 'DOUBLE_SWITCH', '7'),
(555, 40, 318, 'DOUBLE_SWITCH', '7'),
(557, 40, 319, 'DOUBLE_SWITCH', '7'),
(559, 40, 320, 'DOUBLE_SWITCH', '7'),
(561, 40, 321, 'DOUBLE_SWITCH', '7'),
(563, 40, 322, 'DOUBLE_SWITCH', '7'),
(564, 40, 323, 'DOUBLE_SWITCH', '7'),
(566, 34, 187, 'DOUBLE_SWITCH', '7'),
(568, 34, 188, 'DOUBLE_SWITCH', '7'),
(570, 34, 205, 'DOUBLE_SWITCH', '7'),
(572, 34, 309, 'DOUBLE_SWITCH', '7'),
(574, 34, 310, 'DOUBLE_SWITCH', '7'),
(576, 34, 189, 'DOUBLE_SWITCH', '7'),
(578, 34, 311, 'DOUBLE_SWITCH', '7'),
(579, 34, 312, 'DOUBLE_SWITCH', '7'),
(580, 206, 420, 'NO_ERROR', '0'),
(581, 206, 420, 'WRITE_FAILED', '1'),
(582, 206, 420, 'READ_FAILED', '2'),
(583, 206, 420, 'QUEUE_OVERRUN', '3'),
(584, 206, 420, 'BUSY_BUS', '4'),
(585, 206, 420, 'RESET_BUS', '5'),
(586, 40, 316, 'DIMMER_V30', '10'),
(587, 40, 317, 'DIMMER_V30', '10'),
(588, 40, 318, 'DIMMER_V30', '10'),
(589, 40, 319, 'DIMMER_V30', '10'),
(590, 40, 320, 'DIMMER_V30', '10'),
(591, 40, 321, 'DIMMER_V30', '10'),
(592, 40, 322, 'DIMMER_V30', '10'),
(593, 40, 323, 'DIMMER_V30', '10'),
(594, 34, 187, 'DIMMER_V30', '10'),
(595, 34, 188, 'DIMMER_V30', '10'),
(596, 34, 205, 'DIMMER_V30', '10'),
(597, 34, 309, 'DIMMER_V30', '10'),
(598, 34, 310, 'DIMMER_V30', '10'),
(599, 34, 189, 'DIMMER_V30', '10'),
(600, 34, 311, 'DIMMER_V30', '10'),
(601, 34, 312, 'DIMMER_V30', '10'),
(602, 40, 316, 'DIMMER_V31', '11'),
(603, 40, 317, 'DIMMER_V31', '11'),
(604, 40, 318, 'DIMMER_V31', '11'),
(605, 40, 319, 'DIMMER_V31', '11'),
(606, 40, 320, 'DIMMER_V31', '11'),
(607, 40, 321, 'DIMMER_V31', '11'),
(608, 40, 322, 'DIMMER_V31', '11'),
(609, 40, 323, 'DIMMER_V31', '11'),
(610, 34, 187, 'DIMMER_V31', '11'),
(611, 34, 188, 'DIMMER_V31', '11'),
(612, 34, 205, 'DIMMER_V31', '11'),
(613, 34, 309, 'DIMMER_V31', '11'),
(614, 34, 310, 'DIMMER_V31', '11'),
(615, 34, 189, 'DIMMER_V31', '11'),
(616, 34, 311, 'DIMMER_V31', '11'),
(617, 34, 312, 'DIMMER_V31', '11'),
(618, 211, 421, 'FREE', '0'),
(619, 211, 421, 'COVERED', '1'),
(620, 182, 362, 'ACK_MISSING', '7'),
(621, 94, 422, 'COLD', '200'),
(622, 94, 422, 'WARM', '201'),
(623, 94, 422, 'HOT', '202'),
(624, 187, 423, 'DRY', '200'),
(625, 187, 423, 'CONFORTABLE', '201'),
(626, 187, 423, 'WET', '202'),
(627, 33, 68, 'SD6', '3'),
(629, 75, 128, 'COUNTER', '35'),
(631, 75, 210, 'COUNTER', '35'),
(633, 75, 336, 'COUNTER', '35'),
(635, 75, 337, 'COUNTER', '35'),
(637, 75, 338, 'COUNTER', '35'),
(639, 75, 339, 'COUNTER', '35'),
(641, 75, 340, 'COUNTER', '35'),
(642, 75, 341, 'COUNTER', '35'),
(643, 76, 348, 'COUNTER', '35'),
(644, 233, 438, 'CONFIGURATION_OUT_OF_MEMORY', '0'),
(645, 228, 432, 'DECREMENT_FALLING', '2'),
(646, 228, 432, 'INCREMENT_FALLING', '3'),
(647, 228, 432, 'DEREMENT_RISING', '4'),
(648, 228, 432, 'INCREMENT_RISING', '5'),
(649, 228, 432, 'DEREMENT_EITHER', '6'),
(650, 228, 432, 'INCREMENT_EITHER', '7'),
(651, 231, 435, 'DECREMENT_FALLING', '2'),
(652, 231, 435, 'INCREMENT_FALLING', '3'),
(653, 231, 435, 'DEREMENT_RISING', '4'),
(654, 231, 435, 'INCREMENT_RISING', '5'),
(655, 231, 435, 'DEREMENT_EITHER', '6'),
(656, 231, 435, 'INCREMENT_EITHER', '7'),
(658, 76, 129, 'COUNTER', '35'),
(660, 76, 342, 'COUNTER', '35'),
(662, 76, 343, 'COUNTER', '35'),
(664, 76, 344, 'COUNTER', '35'),
(666, 76, 345, 'COUNTER', '35'),
(668, 76, 346, 'COUNTER', '35'),
(670, 76, 347, 'COUNTER', '35'),
(671, 33, 68, 'SD485', '4'),
(672, 143, 256, 'MAX_OBJECTS_REACHED', '10'),
(674, 237, 456, '1', '1'),
(675, 237, 456, '2', '2'),
(676, 237, 456, '3', '3'),
(677, 237, 456, '4', '4'),
(678, 237, 456, '5', '5'),
(679, 237, 456, '6', '6'),
(680, 237, 456, '7', '7'),
(681, 237, 456, '8', '8'),
(682, 237, 456, '9', '9'),
(683, 237, 456, '10', '10'),
(684, 237, 456, '11', '11'),
(685, 237, 456, '12', '12'),
(686, 237, 456, '13', '13'),
(687, 237, 456, '14', '14'),
(688, 237, 456, '15', '15'),
(689, 237, 456, '16', '16'),
(690, 237, 456, '17', '17'),
(691, 237, 456, '18', '18'),
(692, 237, 456, '19', '19'),
(693, 237, 456, '20', '20'),
(694, 237, 456, '21', '21'),
(695, 237, 456, '22', '22'),
(696, 237, 456, '23', '23'),
(697, 237, 456, '24', '24'),
(698, 237, 456, '25', '25'),
(699, 237, 456, '26', '26'),
(700, 237, 456, '27', '27'),
(701, 237, 456, '28', '28'),
(702, 237, 456, '29', '29'),
(703, 237, 456, '30', '30'),
(704, 237, 456, '31', '31'),
(705, 237, 457, 'January', '1'),
(706, 237, 457, 'February', '2'),
(707, 237, 457, 'March', '3'),
(708, 237, 457, 'April', '4'),
(709, 237, 457, 'May', '5'),
(710, 237, 457, 'June', '6'),
(711, 237, 457, 'July', '7'),
(712, 237, 457, 'August', '8'),
(713, 237, 457, 'September', '9'),
(714, 237, 457, 'October', '10'),
(715, 237, 457, 'November', '11'),
(716, 237, 457, 'December', '12'),
(717, 237, 452, 'Monday', '1'),
(718, 237, 452, 'Tuesday', '2'),
(719, 237, 452, 'Wednesday', '3'),
(720, 237, 452, 'Thursday', '4'),
(721, 237, 452, 'Friday', '5'),
(722, 237, 452, 'Saturday', '6'),
(723, 237, 452, 'Sunday', '7'),
(724, 239, 469, 'NO_ERROR', '0'),
(725, 239, 469, 'TWI_BUSY', '1'),
(726, 239, 469, 'TWI_READ_FAILED', '2'),
(727, 239, 469, 'TWI_WRITE_FAILED', '3'),
(728, 239, 469, 'CLOCK_HALTED', '4'),
(729, 33, 68, 'SONOFF', '5'),
(730, 33, 68, 'S0 Reader', '6'),
(733, 206, 420, 'BUFFER_OVERRUN', '6'),
(734, 206, 420, 'NO_CONFIGURATION', '7'),
(736, 261, 525, 'NO_ERROR', '0'),
(737, 33, 68, 'S0 Reader', '6'),
(738, 268, 540, 'BIT', '0'),
(739, 268, 540, 'BYTE', '1'),
(740, 268, 540, 'WORD', '2'),
(741, 269, 543, 'BIT', '0'),
(742, 269, 543, 'BYTE', '1'),
(743, 269, 543, 'WORD', '2'),
(744, 270, 545, 'BIT', '0'),
(745, 270, 545, 'BYTE', '1'),
(746, 270, 545, 'WORD', '2');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `featurefunctionparams`
--

CREATE TABLE `featurefunctionparams` (
  `id` int(11) NOT NULL,
  `featureFunctionId` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `type` varchar(100) NOT NULL,
  `comment` text NOT NULL,
  `view` varchar(30) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `featurefunctionparams`
--

INSERT INTO `featurefunctionparams` (`id`, `featureFunctionId`, `name`, `type`, `comment`, `view`) VALUES
(11, 16, 'holdTimeout', 'BYTE', 'Zeit (a 10ms), die ein Taster mindestens gedrueckt sein muss um in den Zustand GEHALTEN zu wechseln', 'Standard'),
(12, 16, 'waitForDoubleClickTimeout', 'BYTE', 'Zeit (a 10ms), die benoetigt um einen Doppelklick zu erkennen. Wenn das EVENT Doppelklick aktiv ist, wird das EVENT Klick automatisch um diese Zeit verzoeert gesendet. ', 'Standard'),
(13, 16, 'eventMask', 'BITMASK', 'Jedes gesetzte Bit aktiviert das Melden des entsprechenden Events.', 'Standard'),
(77, 42, 'holdTimeout', 'BYTE', 'Zeit (a 10ms), die ein Taster mindestens gedrueckt sein muss um in den Zustand GEHALTEN zu wechseln', 'Standard'),
(87, 23, 'mode', 'ENUM', 'DIMM_CR: dieser Mode ist zu Verwenden, wenn das Leuchtmittel dimmbar und keine induktive Last ist (Phasenabschnitt)\r\nDIMM_L: dieser Mode ist zu Verwenden, wenn das Leuchtmittel dimmbar und eine induktive Last ist (Phasenanschnitt)\r\nSWITCH: fuer alle nicht dimmbaren Leuchtmittel\r\n\r\nACHTUNG: EIN FALSCHER MODE, KANN DAS LEUCHTMITTEL ODER DEN DIMMER ZERSTOEREN!', 'Standard'),
(73, 40, 'startupDelay', 'BYTE', 'a 10ms', 'Standard'),
(64, 33, 'name', 'STRING', 'Modulname', 'Standard'),
(65, 33, 'size', 'DWORD', 'Modulgroesse in Bytes', 'Standard'),
(452, 237, 'weekDay', 'ENUM', '', 'Standard'),
(456, 237, 'date', 'ENUM', '', 'Standard'),
(457, 237, 'month', 'ENUM', '', 'Standard'),
(458, 237, 'year', 'WORD', '', 'Standard'),
(459, 237, 'hours', 'BYTE', '', 'Standard'),
(460, 237, 'minutes', 'BYTE', '', 'Standard'),
(461, 237, 'seconds', 'BYTE', '', 'Standard'),
(66, 33, 'majorRelease', 'BYTE', 'Release-Kennung Format major.minor', 'Standard'),
(67, 33, 'minorRelease', 'BYTE', 'Release-Kennung Format major.minor', 'Standard'),
(68, 33, 'firmwareId', 'ENUM', 'Firmware-Kennung', 'Standard'),
(70, 34, 'startupDelay', 'BYTE', 'a 250ms', 'Standard'),
(71, 34, 'logicalButtonMask', 'BITMASK', 'jedes Bit enspricht einem logischem Taster', 'Standard'),
(120, 34, 'deviceId', 'WORD', '', 'Standard'),
(189, 34, 'slotType2', 'ENUM', '', 'Standard'),
(74, 40, 'logicalButtonMask', 'BITMASK', 'jedes Bit enspricht einem logischem Taster', 'Standard'),
(75, 36, 'objectList', 'WORDLIST', 'Eine Liste der Verfuegbaren Objekte im Geraete', 'Standard'),
(78, 42, 'waitForDoubleClickTimeout', 'BYTE', 'Zeit (a 10ms), die benoetigt um einen Doppelklick zu erkennen. Wenn das EVENT Doppelklick aktiv ist, wird das ', 'Standard'),
(79, 42, 'eventMask', 'BITMASK', 'Jedes gesetzte Bit aktiviert das Melden des entsprechenden Events.', 'Standard'),
(143, 67, 'data', 'BLOB', '', 'Standard'),
(88, 23, 'fadingTime', 'BYTE', 'Zeit (a 50ms) um 0-100% zu dimmen, wenn feste Helligkeitswerte angefahren werden (50ms-10s)', 'Standard'),
(89, 23, 'dimmingTime', 'BYTE', 'Zeit (a 50ms) um 0-100% zu dimmen, wenn keine feste Helligkeitswerte angefahren werden (50ms-10s)', 'Standard'),
(90, 25, 'brightness', 'BYTE', 'Helligkeit in Prozent, aber 0 fuer Default', 'Standard'),
(91, 25, 'duration', 'WORD', 'Einschaltdauer in Sekunden, 0=nicht mehr ausschalten', 'Standard'),
(124, 41, 'freeStack', 'WORD', 'Anzahl des nicht genutzten Stacks in Bytes. ', 'Standard'),
(93, 45, 'mode', 'ENUM', 'DIMM_CR: Dimmer arbeitet mit Phasenabschnitt\r\nDIMM_L: Dimmer arbeitet mit Phasenanschnitt\r\nSWITCH: Dimmer schaltet nur (keine Dimmfunktion)\r\n\r\nACHTUNG: EIN FALSCHER MODE, KANN DAS LEUCHTMITTEL ODER DEN DIMMER ZERSTOEREN!', 'Standard'),
(138, 19, 'brightness', 'BYTE', 'aktuelle Helligkeit 0-100%', 'Standard'),
(94, 45, 'fadingTime', 'BYTE', 'Zeit (a 50ms) um zwischen den unterschiedlichen Helligkeitsstufen zu schalten', 'Standard'),
(119, 67, 'address', 'DWORD', '', 'Standard'),
(118, 66, 'length', 'WORD', '', 'Standard'),
(115, 64, 'direction', 'ENUM', '', 'Standard'),
(113, 47, 'direction', 'ENUM', '', 'Standard'),
(144, 83, 'offset', 'WORD', 'aktueller Offset im Gesamtregelblock', 'Entwickler'),
(140, 82, 'openTime', 'BYTE', 'Zeit, um den Rolladen aus der Geschlossen-Position komplett zu oeffnen', 'Standard'),
(139, 82, 'closeTime', 'BYTE', 'Zeit, um den Rolladen aus der Offen-Position komplett zu schliessen', 'Standard'),
(102, 51, 'position', 'BYTE', 'in Prozent', 'Standard'),
(122, 71, 'brightness', 'BYTE', 'aktuelle Helligkeit 0-100%', 'Standard'),
(104, 55, 'closeTime', 'BYTE', 'Zeit, um den Rolladen aus der Offen-Position komplett zu schliessen', 'Standard'),
(105, 55, 'openTime', 'BYTE', 'Zeit, um den Rolladen aus der Geschlossen-Position komplett zu oeffnen', 'Standard'),
(146, 84, 'offset', 'WORD', 'Offset im Gesamtregelblock', 'Standard'),
(107, 56, 'position', 'BYTE', 'in Prozent', 'Standard'),
(117, 66, 'address', 'DWORD', '', 'Standard'),
(163, 96, 'button1', 'BYTE', 'instanzId des 1.Tasters', 'Standard'),
(125, 72, 'address', 'DWORD', 'Adresse des gemeldeten Speicherinhaltes', 'Standard'),
(126, 72, 'data', 'BLOB', 'Daten...', 'Standard'),
(127, 73, 'status', 'ENUM', '', 'Standard'),
(128, 75, 'pin0', 'ENUM', '', 'Standard'),
(337, 75, 'pin3', 'ENUM', '', 'Standard'),
(129, 76, 'pin0', 'ENUM', '', 'Standard'),
(145, 83, 'data', 'BLOB', '', 'Standard'),
(135, 79, 'position', 'BYTE', '', 'Standard'),
(181, 81, 'state', 'ENUM', '', 'Standard'),
(137, 45, 'dimmingTime', 'BYTE', 'Zeit (a 50ms) um zwischen den unterschiedlichen Helligkeitsstufen zu dimmen', 'Standard'),
(147, 84, 'length', 'WORD', 'Datenlaenge', 'Standard'),
(142, 52, 'direction', 'ENUM', '', 'Standard'),
(148, 85, 'offset', 'WORD', 'offset im Gesamtregelblock', 'Standard'),
(149, 85, 'data', 'BLOB', '', 'Standard'),
(294, 160, 'mac3', 'BYTE', '', 'Standard'),
(293, 160, 'mac4', 'BYTE', '', 'Standard'),
(155, 91, 'lowerThreshold', 'SBYTE', 'untere Temperaturschwelle', 'Standard'),
(156, 91, 'lowerThresholdFraction', 'BYTE', 'lowerThresholdFraction', 'Standard'),
(157, 91, 'upperThreshold', 'SBYTE', 'obere Temperaturschwelle', 'Standard'),
(158, 92, 'lowerThreshold', 'SBYTE', 'untere Temperaturschwelle', 'Standard'),
(159, 92, 'lowerThresholdFraction', 'BYTE', 'Nachkommastellen der unteren Temperaturschwelle [00-99] ', 'Standard'),
(160, 92, 'upperThreshold', 'SBYTE', 'obere Temperaturschwelle', 'Standard'),
(161, 94, 'celsius', 'SBYTE', 'Grad Celsius', 'Standard'),
(162, 94, 'centiCelsius', 'BYTE', 'hundertstel Grad Celsius', 'Standard'),
(164, 97, 'button1', 'BYTE', '', 'Standard'),
(227, 97, 'button2', 'BYTE', '', 'Standard'),
(165, 101, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(166, 101, 'duration', 'WORD', 'Einschaltdauer: \r\nWert * Zeitbasis [ms]\r\n0=nicht mehr ausschalten', 'Standard'),
(167, 102, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(168, 102, 'offTime', 'BYTE', 'Ausschaltdauer: \r\nWert * Zeitbasis [ms]', 'Standard'),
(169, 102, 'onTime', 'BYTE', 'Einschaltdauer: \r\nWert * Zeitbasis [ms]', 'Standard'),
(170, 102, 'quantity', 'BYTE', 'Anzahl Blinks, 0=unendlich', 'Standard'),
(171, 105, 'status', 'ENUM', 'Zustand der LED', 'Standard'),
(172, 107, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(173, 111, 'address', 'WORD', 'IR Adresse', 'Standard'),
(174, 111, 'command', 'WORD', 'IR Kommando', 'Standard'),
(178, 115, 'command', 'WORD', 'IR Kommando', 'Standard'),
(177, 115, 'address', 'WORD', 'IR Adresse', 'Standard'),
(179, 116, 'address', 'WORD', 'IR Adresse', 'Standard'),
(180, 116, 'command', 'WORD', 'IR Kommando', 'Standard'),
(182, 40, 'deviceId', 'WORD', '', 'Standard'),
(183, 40, 'reportMemoryStatusTime', 'BYTE', 'Zeitinterval in Minuten(1-255min, 0: keine Meldung) um den Speicherstatus zu melden. \r\n', 'Standard'),
(186, 34, 'reportMemoryStatusTime', 'BYTE', 'Zeitinterval in Minuten(1-255min, 0: keine Meldung) um den Speicherstatus zu melden. ', 'Standard'),
(187, 34, 'slotType0', 'ENUM', '', 'Standard'),
(188, 34, 'slotType1', 'ENUM', '', 'Standard'),
(256, 143, 'errorCode', 'ENUM', '', 'Standard'),
(191, 118, 'errorCode', 'ENUM', 'NO_ZERO_CROSS_DETECTED: Nulldurchgaenge koennen nicht detektiert werde, evtl. Sicherung aus oder N-Leiter nicht am Modul angeschlossen.\r\nINVALID_PERIOD: FW-Bug, bitte melden.\r\nINVALID_MODE: Der eingestellte Mode wird von dieser FW nicht unterstuetzt.\r\nDEFECT: Der Kanal ist elektrisch defekt.', 'Standard'),
(192, 119, 'errorCode', 'BYTE', '', 'Standard'),
(193, 120, 'errorCode', 'BYTE', '', 'Standard'),
(194, 121, 'errorCode', 'ENUM', '', 'Standard'),
(195, 122, 'errorCode', 'ENUM', '', 'Standard'),
(196, 123, 'errorCode', 'BYTE', '', 'Standard'),
(292, 160, 'mac5', 'BYTE', '', 'Standard'),
(198, 125, 'errorCode', 'BYTE', '', 'Standard'),
(199, 126, 'errorCode', 'ENUM', '', 'Standard'),
(200, 127, 'errorCode', 'ENUM', '', 'Standard'),
(201, 128, 'position', 'BYTE', 'Aktuelle Position setzen (0-100% geschlossen)', 'Standard'),
(202, 129, 'weektime', 'WEEKTIME', '', 'Standard'),
(203, 130, 'deviceId', 'WORD', 'neue ID', 'Standard'),
(204, 131, 'reason', 'ENUM', 'Grund fuer dieses Event', 'Standard'),
(205, 34, 'slotType3', 'ENUM', '', 'Standard'),
(316, 40, 'slotType0', 'ENUM', '', 'Standard'),
(317, 40, 'slotType1', 'ENUM', '', 'Standard'),
(210, 75, 'pin1', 'ENUM', '', 'Standard'),
(336, 75, 'pin2', 'ENUM', '', 'Standard'),
(212, 96, 'button2', 'BYTE', 'instanzId des 2.Tasters', 'Standard'),
(213, 96, 'button3', 'BYTE', '', 'Standard'),
(214, 96, 'button4', 'BYTE', '', 'Standard'),
(215, 96, 'button5', 'BYTE', '', 'Standard'),
(216, 96, 'button6', 'BYTE', '', 'Standard'),
(217, 96, 'button7', 'BYTE', '', 'Standard'),
(218, 96, 'button8', 'BYTE', '', 'Standard'),
(219, 96, 'led1', 'BYTE', '', 'Standard'),
(220, 96, 'led2', 'BYTE', '', 'Standard'),
(221, 96, 'led3', 'BYTE', '', 'Standard'),
(222, 96, 'led4', 'BYTE', '', 'Standard'),
(223, 96, 'led5', 'BYTE', '', 'Standard'),
(224, 96, 'led6', 'BYTE', '', 'Standard'),
(225, 96, 'led7', 'BYTE', '', 'Standard'),
(226, 96, 'led8', 'BYTE', '', 'Standard'),
(228, 97, 'button3', 'BYTE', '', 'Standard'),
(229, 97, 'button4', 'BYTE', '', 'Standard'),
(230, 97, 'button5', 'BYTE', '', 'Standard'),
(231, 97, 'button6', 'BYTE', '', 'Standard'),
(232, 97, 'button7', 'BYTE', '', 'Standard'),
(233, 97, 'button8', 'BYTE', '', 'Standard'),
(234, 97, 'led1', 'BYTE', '', 'Standard'),
(235, 97, 'led2', 'BYTE', '', 'Standard'),
(236, 97, 'led3', 'BYTE', '', 'Standard'),
(237, 97, 'led4', 'BYTE', '', 'Standard'),
(238, 97, 'led5', 'BYTE', '', 'Standard'),
(239, 97, 'led6', 'BYTE', '', 'Standard'),
(240, 97, 'led7', 'BYTE', '', 'Standard'),
(241, 97, 'led8', 'BYTE', '', 'Standard'),
(242, 133, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(243, 137, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(244, 137, 'duration', 'WORD', 'Einschaltdauer in Sekunden, 0=nicht mehr ausschalten', 'Standard'),
(245, 138, 'brightness', 'BYTE', '0-100% Helligkeit', 'Standard'),
(246, 138, 'offTime', 'BYTE', 'a 100ms', 'Standard'),
(247, 138, 'onTime', 'BYTE', 'a 100ms', 'Standard'),
(248, 138, 'quantity', 'BYTE', 'Anzahl Blinks, 0=unendlich', 'Standard'),
(249, 139, 'status', 'ENUM', 'Zustand der Taster LED(s)', 'Standard'),
(250, 141, 'holdTimeout', 'BYTE', 'Zeit (a 10ms), die ein Taster mindestens gedrueckt sein muss um in den Zustand GEHALTEN zu wechseln', 'Standard'),
(251, 141, 'waitForDoubleClickTimeout', 'BYTE', 'Zeit (a 10ms), die benoetigt um einen Doppelklick zu erkennen. Wenn das EVENT Doppelklick aktiv ist, wird das EVENT Klick automatisch um diese Zeit verzoegert gesendet. ', 'Standard'),
(252, 141, 'eventMask', 'BITMASK', 'Jedes gesetzte Bit aktiviert das Melden des entsprechenden Events.', 'Standard'),
(253, 99, 'dimmOffset', 'BYTE', '0-100% offset auf den im Kommando angegebenen Helligkeitswert', 'Standard'),
(254, 142, 'dimmOffset', 'BYTE', '0-100% offset auf den im Kommando angegebenen Helligkeitswert', 'Standard'),
(255, 104, 'dimmOffset', 'BYTE', '0-100% offset auf den im Kommando angegebenen Helligkeitswert', 'Standard'),
(257, 31, 'index', 'ENUM', '', 'Standard'),
(331, 172, 'minBrightness', 'BYTE', 'Eine ausgeschaltete LED leuchtet immer noch mit dieser Helligkeit (0-100%)', 'Standard'),
(262, 146, 'weekTime', 'WEEKTIME', '', 'Standard'),
(263, 147, 'weekTime', 'WEEKTIME', '', 'Standard'),
(265, 60, 'duration', 'WORD', 'Einschaltdauer: \r\nWert * Zeitbasis [ms]\r\n0=nicht mehr ausschalten', 'Standard'),
(266, 18, 'offTime', 'BYTE', 'Ausschaltdauer: \r\nWert * Zeitbasis [ms] ', 'Standard'),
(417, 18, 'onTime', 'BYTE', 'Einschaltdauer: \r\nWert * Zeitbasis [ms] ', 'Standard'),
(418, 18, 'quantity', 'BYTE', 'Anzahl der Zustandswechsel', 'Standard'),
(267, 148, 'index', 'BYTE', 'Index des abzufragenden Regelzustandes auf dem Controller', 'Standard'),
(268, 149, 'index', 'BYTE', 'Index des zu setzenden Regelzustandes auf dem Controller. ', 'Standard'),
(269, 149, 'state', 'BYTE', 'Der Zustand wird gesetzt ohne die Aktionen auszufuehren.', 'Standard'),
(270, 150, 'indexRule', 'BYTE', 'Index der Regel im Controller.', 'Standard'),
(271, 150, 'indexElement', 'BYTE', 'Index des auszufuehrenden Regelelementes. Alle Aktionen werden ausgefuehrt und der neue Zustand eingenommen.', 'Standard'),
(272, 151, 'index', 'BYTE', 'Index der abgefragten Regel', 'Standard'),
(273, 151, 'state', 'BYTE', 'Regelzustand', 'Standard'),
(276, 152, 'address0', 'BYTE', '', 'Standard'),
(277, 152, 'address1', 'BYTE', '', 'Standard'),
(278, 152, 'address2', 'BYTE', '', 'Standard'),
(279, 152, 'address3', 'BYTE', '', 'Standard'),
(280, 153, 'address0', 'BYTE', '', 'Standard'),
(281, 153, 'address1', 'BYTE', '', 'Standard'),
(282, 153, 'address2', 'BYTE', '', 'Standard'),
(283, 153, 'address3', 'BYTE', '', 'Standard'),
(284, 156, 'command', 'BYTE', 'Dali Kommando (s.Spezifikation)', 'Standard'),
(285, 156, 'address', 'BYTE', 'Kurz- oder Gruppenadresse YAAA AAAS\r\n64 Kurzadressen           0AAA AAAS\r\n16 Gruppenadressen        100A AAAS\r\nSammelaufruf              1111 111S\r\n\r\nY: Adressenart: Y=?  ? ? ??  ?? ??? ??  ?0?  ? ? ??  ?? ??? ??  ? ? Kurzadresse,\r\n                Y=?  ? ? ??  ?? ??? ??  ? ?1?  ? ? ??  ?? ??? ??  ? ? Gruppenadresse oder Sammelaufruf\r\nA: Signifikantes Adressbit\r\nS: Auswahlbit: S=?  ? ? ??  ?? ??? ??  ?? ?0?  ? ? ??  ?? ??? ??  ?? ?, direkter Wert der Lampenleistung folgt', 'Standard'),
(286, 157, 'address0', 'BYTE', '', 'Standard'),
(287, 157, 'address1', 'BYTE', '', 'Standard'),
(288, 157, 'address2', 'BYTE', '', 'Standard'),
(289, 157, 'address3', 'BYTE', '', 'Standard'),
(290, 158, 'status', 'BYTE', '', 'Standard'),
(291, 159, 'errorCode', 'ENUM', '', 'Standard'),
(295, 160, 'mac2', 'BYTE', '', 'Standard'),
(296, 160, 'mac1', 'BYTE', '', 'Standard'),
(297, 160, 'mac0', 'BYTE', '', 'Standard'),
(298, 161, 'IP0', 'BYTE', 'Eigene IP-Adresse im Format IP0.IP1.IP2.IP3, wenn per DHCP keine vergeben wurde. ', 'Standard'),
(299, 161, 'IP1', 'BYTE', 'Eigene IP-Adresse im Format IP0.IP1.IP2.IP3, wenn per DHCP keine vergeben wurde. ', 'Standard'),
(300, 161, 'IP2', 'BYTE', 'Eigene IP-Adresse im Format IP0.IP1.IP2.IP3, wenn per DHCP keine vergeben wurde. ', 'Standard'),
(301, 161, 'IP3', 'BYTE', 'Eigene IP-Adresse im Format IP0.IP1.IP2.IP3, wenn per DHCP keine vergeben wurde. ', 'Standard'),
(302, 162, 'IP0', 'BYTE', '', 'Standard'),
(303, 162, 'IP1', 'BYTE', '', 'Standard'),
(304, 162, 'IP2', 'BYTE', '', 'Standard'),
(305, 162, 'IP3', 'BYTE', '', 'Standard'),
(306, 164, 'errorCode', 'ENUM', '', 'Experte'),
(307, 168, 'errorCode', 'ENUM', '', 'Standard'),
(362, 182, 'errorCode', 'ENUM', '', 'Standard'),
(309, 34, 'slotType4', 'ENUM', '', 'Standard'),
(310, 34, 'slotType5', 'ENUM', '', 'Standard'),
(311, 34, 'slotType6', 'ENUM', '', 'Standard'),
(312, 34, 'slotType7', 'ENUM', '', 'Standard'),
(313, 34, 'timeCorrection', 'BYTE', 'Korregiert den internen Zeitgeber um diesen Wert pro Minute', 'Standard'),
(314, 34, 'reserve', 'WORD', '', 'Standard'),
(315, 34, 'dataBlockSize', 'WORD', 'maximale Groesse des Datenblocks in einer Nachricht', 'Standard'),
(318, 40, 'slotType2', 'ENUM', '', 'Standard'),
(319, 40, 'slotType3', 'ENUM', '', 'Standard'),
(320, 40, 'slotType4', 'ENUM', '', 'Standard'),
(321, 40, 'slotType5', 'ENUM', '', 'Standard'),
(322, 40, 'slotType6', 'ENUM', '', 'Standard'),
(323, 40, 'slotType7', 'ENUM', '', 'Standard'),
(324, 34, 'FCKE', 'BYTE', 'ControllerBoard Version (Bsp. 30 = v3.0)', 'Standard'),
(325, 41, 'freeHeap', 'WORD', 'Aktuell freier Heap in Bytes. ', 'Standard'),
(326, 169, 'index', 'BYTE', 'Gruppenindex', 'Standard'),
(327, 169, 'member', 'BYTE', 'Gruppenteilnehmer (0-15)', 'Standard'),
(328, 169, 'state', 'BYTE', 'Zustand des Teilnehmers (0=AUS, ungleich 0=AN)', 'Standard'),
(329, 170, 'index', 'BYTE', 'Gruppenindex', 'Standard'),
(330, 171, 'index', 'BYTE', 'Gruppenindex', 'Standard'),
(350, 57, 'direction', 'ENUM', '', 'Standard'),
(349, 169, 'triggerBits', 'BYTE', 'Anzahl der Teilnehmer die gesetzt sein muessen damit evGroupOn erzeugt wird', 'Standard'),
(334, 174, 'index', 'BYTE', 'Gruppenindex', 'Standard'),
(338, 75, 'pin4', 'ENUM', '', 'Standard'),
(339, 75, 'pin5', 'ENUM', '', 'Standard'),
(340, 75, 'pin6', 'ENUM', '', 'Standard'),
(341, 75, 'pin7', 'ENUM', '', 'Standard'),
(342, 76, 'pin1', 'ENUM', '', 'Standard'),
(343, 76, 'pin2', 'ENUM', '', 'Standard'),
(344, 76, 'pin3', 'ENUM', '', 'Standard'),
(345, 76, 'pin4', 'ENUM', '', 'Standard'),
(346, 76, 'pin5', 'ENUM', '', 'Standard'),
(347, 76, 'pin6', 'ENUM', '', 'Standard'),
(348, 76, 'pin7', 'ENUM', '', 'Standard'),
(354, 176, 'ruleIndex', 'BYTE', '', 'Standard'),
(355, 176, 'elementIndex', 'BYTE', '', 'Standard'),
(356, 104, 'minBrightness', 'BYTE', 'Eine ausgeschaltete LED leuchtet immer noch mit dieser Helligkeit (0-100%)', 'Standard'),
(357, 99, 'minBrightness', 'BYTE', 'Eine ausgeschaltete LED leuchtet immer noch mit dieser Helligkeit (0-100%)', 'Standard'),
(358, 142, 'minBrightness', 'BYTE', 'Eine ausgeschaltete LED leuchtet immer noch mit dieser Helligkeit (0-100%)', 'Standard'),
(359, 177, 'minBrightness', 'BYTE', 'Eine ausgeschaltete LED leuchtet immer noch mit dieser Helligkeit (0-100%)', 'Standard'),
(364, 184, 'lowerThresholdFraction', 'BYTE', 'Nachkommastellen der unteren Temperaturschwelle [00-99] ', 'Standard'),
(361, 178, 'option', 'BITMASK', 'SEND_TRIGGERED_RULE_EVENT: generiert ein Event zu einer aktivierten Regel\r\nREAD_ONLY_GATEWAYS: schaltet das Versenden saemtlicher Nachrichten ab. Eingehende Nachrichten werden verarbeitet', 'Experte'),
(363, 184, 'lowerThreshold', 'BYTE', 'untere Temperaturschwelle', 'Standard'),
(365, 184, 'upperThreshold', 'BYTE', 'obere Temperaturschwelle', 'Standard'),
(366, 186, 'lowerThreshold', 'BYTE', 'untere Temperaturschwelle', 'Standard'),
(367, 186, 'lowerThresholdFraction', 'BYTE', 'Nachkommastellen der unteren Temperaturschwelle [00-99] ', 'Standard'),
(368, 186, 'upperThreshold', 'BYTE', 'obere Temperaturschwelle', 'Standard'),
(369, 187, 'relativeHumidity', 'WORD', 'Relative Luftfeuchte in %', 'Standard'),
(370, 82, 'options', 'BITMASK', 'inverted: invertiert die Richtung der Ansteuerung des Rollladen.\r\nindependent: behandelt die Relais unabh?ngig voneinander (d.h. pro Richtung wird nur das jeweilige Relais geschaltet)', 'Standard'),
(371, 55, 'options', 'BITMASK', 'inverted: invertiert die Richtung der Ansteuerung des Rollladen.\r\nindependent: behandelt die Relais unabh?ngig voneinander (d.h. pro Richtung wird nur das jeweilige Relais geschaltet)', 'Standard'),
(372, 188, 'enable', 'ENUM', 'FALSE: Deaktiviert das Versenden von Events\r\nTRUE: Aktiviert das Versenden von Events\r\nINVERT: Invertiert das aktuelle Verhalten', 'Standard'),
(373, 168, 'MasterStatus', 'BITMASK', '', 'Standard'),
(374, 168, 'SlaveStatus', 'BITMASK', '', 'Standard'),
(375, 168, 'SCL', 'BYTE', '0: LOW sonst HIGH', 'Standard'),
(376, 168, 'SDA', 'BYTE', '0: LOW sonst HIGH', 'Standard'),
(377, 168, 'Timeout', 'WORD', 'im ms', 'Standard'),
(378, 189, 'command', 'STRING', '', 'Standard'),
(379, 190, 'timeDifference', 'BYTE', 'Abweichung der internen Wochenzeit in Minuten (Achtung: Vorzeichenbehaftetes Byte. 255 entspricht -1)', 'Standard'),
(380, 191, 'idleResponseDelay', 'BYTE', 'Wartezeit[ms] nach IDLE bis wieder gesendet werden darf. ', 'Standard'),
(382, 193, 'idleResponseDelay', 'BYTE', 'Wartezeit[ms] nach IDLE bis wieder gesendet werden darf. ', 'Standard'),
(383, 194, 'varId', 'BYTE', '', 'Standard'),
(384, 194, 'varValue', 'BYTE', '', 'Standard'),
(385, 197, 'sunriseTime', 'WEEKTIME', 'Zeit fuer den Sonnenaufgang.', 'Standard'),
(386, 197, 'sunsetTime', 'WEEKTIME', 'Zeit fuer den Sonnenuntergang.', 'Standard'),
(392, 199, 'text', 'STRING', 'Beschreibung', 'Standard'),
(391, 199, 'sunset', 'WEEKTIME', 'Zeitpunkt vom Sonnenuntergang', 'Standard'),
(390, 199, 'sunrise', 'WEEKTIME', 'Zeitpunkt vom Sonnenaufgang', 'Standard'),
(389, 199, 'temp', 'BYTE', 'Temperatur', 'Standard'),
(388, 199, 'pressure', 'WORD', 'Luftdruck', 'Standard'),
(387, 199, 'humidity', 'BYTE', 'Luftfeuchtigkeit', 'Standard'),
(394, 177, 'duration', 'WORD', 'Einschaltdauer in Sekunden, 0=nicht mehr ausschalten', 'Standard'),
(395, 23, 'dimmingRangeStart', 'BYTE', 'Startwert des Helligkeitbereiches in dem gedimmt werden soll. (0-100%, Standard = 0%)', 'Standard'),
(396, 23, 'dimmingRangeEnd', 'BYTE', 'Endwert des Helligkeitbereiches in dem gedimmt werden soll. (0-100%, Standard = 100%)', 'Standard'),
(397, 45, 'dimmingRangeStart', 'BYTE', 'Startwert des Helligkeitbereiches in dem gedimmt werden soll. (0-100%, Standard = 0%)', 'Standard'),
(398, 45, 'dimmingRangeEnd', 'BYTE', 'Endwert des Helligkeitbereiches in dem gedimmt werden soll. (0-100%, Standard = 100%)', 'Standard'),
(399, 200, 'IP0', 'BYTE', '', 'Standard'),
(400, 200, 'IP1', 'BYTE', '', 'Standard'),
(401, 200, 'IP2', 'BYTE', '', 'Standard'),
(402, 200, 'IP3', 'BYTE', '', 'Standard'),
(403, 162, 'options', 'BITMASK', '', 'Standard'),
(404, 161, 'options', 'BITMASK', '', 'Standard'),
(405, 203, 'maxOnTime', 'BYTE', 'Maximale Zeit, dier der Schalter eingeschaltet sein darf.', 'Standard'),
(406, 203, 'offDelayTime', 'BYTE', 'Verzoegerungszeit (nach einem Off-Kommando), bevor der Schalter ausgeschaltet werden darf.', 'Standard'),
(407, 203, 'timeBase', 'WORD', 'Zeitbasis [ms] fuer die Zeitabhaengigen Befehle', 'Standard'),
(408, 203, 'options', 'BITMASK', 'Reservierte Bits muessen immer deaktiviert sein. Das Aktivieren eines reservierten Bits fuehrt nach dem Neustart des Controllers zu den Standart-Einstellungen.', 'Standard'),
(409, 104, 'timeBase', 'WORD', 'Zeitbasis [ms] f?  ? ? ?r Zeitabh?  ? ? ??ngige Befehle.', 'Standard'),
(410, 104, 'options', 'BITMASK', 'Reservierte Bits m?  ? ? ?ssen immer deaktiviert sein. Das Aktivieren eines reservierten Bits f?  ? ? ?hrt nach dem Neustart des Controllers zu den Standart-Einstellungen.', 'Standard'),
(411, 99, 'timeBase', 'WORD', 'Zeitbasis [ms] f?  ? ? ?r Zeitabh?  ? ? ??ngige Befehle.', 'Standard'),
(412, 99, 'options', 'BITMASK', 'Reservierte Bits m?  ? ? ?ssen immer deaktiviert sein. Das Aktivieren eines reservierten Bits f?  ? ? ?hrt nach dem Neustart des Controllers zu den Standart-Einstellungen.', 'Standard'),
(413, 205, 'maxOnTime', 'BYTE', 'Maximale Zeit, dier der Schalter eingeschaltet sein darf.', 'Standard'),
(414, 205, 'offDelayTime', 'BYTE', 'Verzoegerungszeit (nach einem Off-Kommando), bevor der Schalter ausgeschaltet werden darf.', 'Standard'),
(415, 205, 'timeBase', 'WORD', 'Zeitbasis [ms] fuer die Zeitabhaengigen Befehle', 'Standard'),
(416, 205, 'options', 'BITMASK', 'Reservierte Bits muessen immer deaktiviert sein. Das Aktivieren eines reservierten Bits fuehrt nach dem Neustart des Controllers zu den Standart-Einstellungen.', 'Standard'),
(419, 188, 'disabledDuration', 'BYTE', 'Zeit(1s-255s) f?  ? ? ?r die die Events deaktiviert werden sollen (0 = unendlich )\r\nDieser Parameter wirkt nur, wenn die Events mit diesem Kommando deaktiviert werden.\r\n', 'Standard'),
(420, 206, 'errorCode', 'ENUM', '', 'Standard'),
(421, 211, 'state', 'ENUM', '', 'Standard'),
(422, 94, 'lastEvent', 'ENUM', '', 'Standard'),
(423, 187, 'lastEvent', 'ENUM', '', 'Standard'),
(424, 220, 'timings', 'WORDLIST', '', 'Standard'),
(425, 224, 'deviceIds', 'WORDLIST', '', 'Experte'),
(426, 226, 'messagesPerMinute', 'WORD', 'Anzahl der Nachrichten pro Sekunde, gemittelt ber einen Zeitraum von einer Minute.', 'Standard'),
(427, 226, 'bytesPerMinute', 'DWORD', 'Anzahl der Datenbytes pro Sekunde, gemittelt ber einen Zeitraum von einer Minute.', 'Standard'),
(428, 92, 'upperThresholdFraction', 'BYTE', 'Nachkommastellen der oberen Temperaturschwelle [00-99] ', 'Standard'),
(429, 91, 'upperThresholdFraction', 'BYTE', 'Nachkommastellen der oberen Temperaturschwelle [00-99] ', 'Standard'),
(430, 184, 'upperThresholdFraction', 'BYTE', 'Nachkommastellen der oberen Temperaturschwelle [00-99] ', 'Standard'),
(431, 186, 'upperThresholdFraction', 'BYTE', 'Nachkommastellen der oberen Temperaturschwelle [00-99] ', 'Standard'),
(432, 228, 'mode', 'ENUM', '', 'Standard'),
(439, 228, 'reportIntervall', 'WORD', '0 = no reports\r\n1-65535 [min]', 'Standard'),
(434, 230, 'value', 'DWORD', '', 'Standard'),
(435, 231, 'mode', 'ENUM', '', 'Standard'),
(440, 231, 'reportIntervall', 'WORD', '0 = no reports\r\n1-65535 [min]', 'Standard'),
(437, 232, 'value', 'DWORD', '', 'Standard'),
(438, 233, 'errorCode', 'ENUM', '', 'Standard'),
(443, 234, 'status', 'DWORD', '', 'Standard'),
(462, 238, 'weekday', 'BYTE', '', 'Standard'),
(463, 238, 'date', 'BYTE', '', 'Standard'),
(464, 238, 'month', 'BYTE', '', 'Standard'),
(465, 238, 'year', 'WORD', '', 'Standard'),
(466, 238, 'hours', 'BYTE', '', 'Standard'),
(467, 238, 'minutes', 'BYTE', '', 'Standard'),
(468, 238, 'seconds', 'BYTE', '', 'Standard'),
(469, 239, 'errorCode', 'ENUM', '', 'Standard'),
(470, 62, 'duration', 'WORD', 'Dauer, fuer die der Schalter eingeschaltet worden ist oder\r\n* f?r alle', 'Experte'),
(471, 240, 'config', 'BITMASK', '', 'Standard'),
(472, 240, 'impPerKwh', 'WORD', 'Anzahl Signale pro kWh', 'Standard'),
(473, 240, 'startCurrent', 'DWORD', 'Startwert Stromverbrauch in Wattstunden', 'Standard'),
(474, 240, 'currentReportInterval', 'WORD', 'Interval in Sekunden nach dem immer der aktuelle Gesamtstromverbrauch gemeldet wird', 'Standard'),
(475, 242, 'config', 'BITMASK', '', 'Standard'),
(476, 242, 'impPerKwh', 'WORD', 'Anzahl Signale pro kWh', 'Standard'),
(477, 242, 'startCurrent', 'DWORD', 'Startwert Stromverbrauch in Wattstunden', 'Standard'),
(478, 242, 'currentReportInterval', 'WORD', 'Interval in Sekunden nach dem immer der aktuelle Gesamtstromverbrauch gemeldet wird', 'Standard'),
(479, 243, 'time', 'DWORD', 'Systemzeit des ESP zu Debugzwecken', 'Standard'),
(480, 243, 'signalCount', 'DWORD', 'Anzahl gez?hlter S0 Signale seit dem letzten Zur?cksetzen', ''),
(481, 243, 'power', 'WORD', 'Aktuelle Leistung in Watt', 'Standard'),
(482, 243, 'signalDuration', 'DWORD', 'Dauer des gemessenen S0 Signals in ms', 'Standard'),
(483, 245, 'current', 'DWORD', 'Verbrauchter Strom in Wattstunden', 'Standard'),
(484, 246, 'power', 'WORD', 'Aktuelle Leistung in Watt', 'Standard'),
(485, 247, 'current', 'DWORD', 'verbrauchter Strom in Wattstunden', 'Standard'),
(486, 249, 'signalCount', 'DWORD', 'Anzahl gez?hlter S0 Signale seit dem letzten Zur?cksetzen', 'Standard'),
(487, 251, 'signalCount', 'DWORD', '', 'Standard'),
(488, 255, 'data', 'DWORD', '', 'Standard'),
(489, 255, 'type', 'BITMASK', '', 'Standard'),
(490, 256, 'value', 'BYTE', '', 'Standard'),
(491, 256, 'stamp', 'DWORD', '', 'Standard'),
(492, 257, 'IP0', 'BYTE', '', 'Standard'),
(493, 257, 'IP1', 'BYTE', '', 'Standard'),
(494, 257, 'IP2', 'BYTE', '', 'Standard'),
(495, 257, 'IP3', 'BYTE', '', 'Standard'),
(496, 257, 'port', 'WORD', '', 'Standard'),
(497, 259, 'IP0', 'BYTE', '', 'Standard'),
(498, 259, 'IP1', 'BYTE', '', 'Standard'),
(499, 259, 'IP2', 'BYTE', '', 'Standard'),
(500, 259, 'IP3', 'BYTE', '', 'Standard'),
(502, 217, 'options', 'BITMASK', 'Reservierte Bits muessen immer deaktiviert sein. Das Aktivieren eines reservierten Bits fuehrt nach dem Neustart des Controllers zu den Standart-Einstellungen.', 'Experte'),
(503, 221, 'options', 'BITMASK', 'enabled: Dies Gateway ist aktiv und leitet Nachrichten weiter', 'Experte'),
(504, 161, 'port', 'WORD', 'Zusaetzlicher Port f?r die Homeserverfunktionen', 'Standard'),
(505, 162, 'port', 'WORD', 'Zusaetzlicher Port f?r die Homeserverfunktionen', 'Standard'),
(506, 184, 'reportTimeBase', 'BYTE', 'Zeitbasis f?r die Einstellungen von minReportTime und maxReportTime', 'Standard'),
(507, 184, 'minReportTime', 'BYTE', 'Mindestzeit, die seit dem letzten Melden vergehen muss bevor die n?chste Meldung gesendet werden darf', 'Standard'),
(508, 184, 'maxReportTime', 'BYTE', 'Maximalzeit, nach deren Ablauf die n?chste Meldung gesendet wird, wenn keine andere Bedingung zum Senden vorliegt', 'Standard'),
(509, 184, 'hysteresis', 'BYTE', 'Hysterese [Wert * 0,1], die berschritten werden muss, um wieder in den vorherigen Zustand zurckzukehren bzw um eine Meldung abzusetzen in der Zeit zwischen minReportTime und maxReportTime', 'Standard'),
(511, 186, 'reportTimeBase', 'BYTE', 'Zeitbasis f?r die Einstellungen von minReportTime und maxReportTime', 'Standard'),
(512, 186, 'minReportTime', 'BYTE', 'Mindestzeit, die seit dem letzten Melden vergehen muss bevor die n?chste Meldung gesendet werden darf', 'Standard'),
(513, 186, 'maxReportTime', 'BYTE', 'Maximalzeit, nach deren Ablauf die n?chste Meldung gesendet wird, wenn keine andere Bedingung zum Senden vorliegt', 'Standard'),
(515, 186, 'hysteresis', 'BYTE', 'Hysterese [Wert * 0,1%], die berschritten werden muss, um wieder in den vorherigen Zustand zurckzukehren bzw um eine Meldung abzusetzen in der Zeit zwischen minReportTime und maxReportTime', 'Standard'),
(517, 92, 'reportTimeBase', 'BYTE', 'Zeitbasis f?r die Einstellungen von minReportTime und maxReportTime', 'Standard'),
(518, 92, 'minReportTime', 'BYTE', 'Mindestzeit, die seit dem letzten Melden vergehen muss bevor die n?chste Meldung gesendet werden darf', 'Standard'),
(519, 92, 'maxReportTime', 'BYTE', 'Maximalzeit, nach deren Ablauf die n?chste Meldung gesendet wird, wenn keine andere Bedingung zum Senden vorliegt', 'Standard'),
(524, 92, 'hysteresis', 'BYTE', 'Hysterese [Wert * 0,1?C], die berschritten werden muss, um wieder in den vorherigen Zustand zurckzukehren bzw um eine Meldung abzusetzen in der Zeit zwischen minReportTime und maxReportTime', 'Standard'),
(520, 91, 'reportTimeBase', 'BYTE', 'Zeitbasis f?r die Einstellungen von minReportTime und maxReportTime', 'Standard'),
(521, 91, 'minReportTime', 'BYTE', 'Mindestzeit, die seit dem letzten Melden vergehen muss bevor die n?chste Meldung gesendet werden darf', 'Standard'),
(522, 91, 'maxReportTime', 'BYTE', 'Maximalzeit, nach deren Ablauf die n?chste Meldung gesendet wird, wenn keine andere Bedingung zum Senden vorliegt', 'Standard'),
(523, 91, 'hysteresis', 'BYTE', 'Hysterese [Wert * 0,1?C], die berschritten werden muss, um wieder in den vorherigen Zustand zurckzukehren bzw um eine Meldung abzusetzen in der Zeit zwischen minReportTime und maxReportTime', 'Standard'),
(525, 261, 'errorCode', 'ENUM', '', 'Standard'),
(526, 263, 'mac1', 'BYTE', '', 'Standard'),
(527, 263, 'mac2', 'BYTE', '', 'Standard'),
(528, 263, 'mac3', 'BYTE', '', 'Standard'),
(529, 263, 'mac4', 'BYTE', '', 'Standard'),
(530, 263, 'mac5', 'BYTE', '', 'Standard'),
(531, 263, 'mac6', 'BYTE', '', 'Standard'),
(532, 264, 'SSID', 'STRING', '', 'Standard'),
(533, 264, 'Password', 'STRING', '', 'Standard'),
(534, 265, 'SSID', 'STRING', '', 'Standard'),
(535, 265, 'Password', 'STRING', '', 'Standard'),
(536, 267, 'IP0', 'BYTE', '', 'Standard'),
(537, 267, 'IP1', 'BYTE', '', 'Standard'),
(538, 267, 'PI2', 'BYTE', '', 'Standard'),
(539, 267, 'IP3', 'BYTE', '', 'Standard'),
(540, 268, 'type', 'ENUM', 'Hier wird der Typ der Variable, die gesetzt werden soll definiert.', 'Experte'),
(541, 268, 'index', 'BYTE', 'Die Variablen liegen mehrfach vor (32xBIT, 16xBYTE, 16xWORD). Mit dem index wird eine davon selektiert.', 'Experte'),
(542, 268, 'value', 'WORD', 'Die Systemvariable wird mit diesem Wert belegt.', 'Experte'),
(543, 269, 'type', 'ENUM', 'Hier wird der Typ der Variable, die abgefragt werden soll definiert.', 'Standard'),
(544, 269, 'index', 'BYTE', 'Die Variablen liegen mehrfach vor (32xBIT, 16xBYTE, 16xWORD). Mit dem index wird eine davon selektiert.', 'Standard'),
(545, 270, 'type', 'ENUM', 'Gibt den Typ der Variable an, die hier gemeldet wird.', 'Standard'),
(546, 270, 'index', 'BYTE', 'Die Variablen liegen mehrfach vor (32xBIT, 16xBYTE, 16xWORD). Der Index gibt an, welche hiermit gemeldet wird.', 'Standard'),
(547, 270, 'value', 'WORD', 'Der Wert der Systemvariable.', 'Standard'),
(548, 161, 'Loxon_IP0', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(549, 161, 'Loxon_IP1', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(550, 161, 'Loxon_IP2', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(551, 161, 'Loxon_IP3', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(552, 162, 'Loxone_IP0', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(553, 162, 'Loxone_IP1', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(554, 162, 'Loxone_IP2', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard'),
(555, 162, 'Loxone_IP3', 'BYTE', 'Loxone MiniServer IP-Adresse im Format IP0.IP1.IP2.IP3 (0.0.0.0 deaktiviert das Loxone Gateway 13)', 'Standard');

-- --------------------------------------------------------

--
-- Tabellenstruktur f端r Tabelle `featurefunctions`
--

CREATE TABLE `featurefunctions` (
  `id` int(11) NOT NULL,
  `featureClassesId` int(11) NOT NULL,
  `type` varchar(50) NOT NULL,
  `name` varchar(255) NOT NULL,
  `functionId` int(11) NOT NULL,
  `view` varchar(30) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Daten f端r Tabelle `featurefunctions`
--

INSERT INTO `featurefunctions` (`id`, `featureClassesId`, `type`, `name`, `functionId`, `view`) VALUES
(2, 1, 'EVENT', 'evClicked', 201, 'Experte'),
(3, 1, 'EVENT', 'evDoubleClick', 202, 'Experte'),
(4, 1, 'EVENT', 'evHoldStart', 203, 'Experte'),
(5, 1, 'EVENT', 'evHoldEnd', 204, 'Experte'),
(6, 2, 'EVENT', 'evCold', 200, 'Experte'),
(7, 2, 'EVENT', 'evWarm', 201, 'Experte'),
(8, 2, 'EVENT', 'evHot', 202, 'Experte'),
(9, 2, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(97, 17, 'RESULT', 'Configuration', 128, 'Standard'),
(172, 18, 'ACTION', 'setMinBrightness', 6, 'Standard'),
(96, 17, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(95, 17, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(15, 1, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(16, 1, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(80, 8, 'FUNCTION', 'getStatus', 5, 'Standard'),
(18, 8, 'ACTION', 'toggle', 4, 'Standard'),
(19, 9, 'EVENT', 'evOn', 201, 'Experte'),
(46, 9, 'EVENT', 'evOff', 200, 'Experte'),
(24, 9, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(23, 9, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(25, 9, 'ACTION', 'setBrightness', 2, 'Standard'),
(31, 12, 'FUNCTION', 'getModuleId', 2, 'Standard'),
(32, 12, 'FUNCTION', 'getConfiguration', 5, 'Standard'),
(33, 12, 'RESULT', 'ModuleId', 128, 'Standard'),
(34, 12, 'RESULT', 'Configuration', 131, 'Standard'),
(35, 12, 'FUNCTION', 'getRemoteObjects', 3, 'Standard'),
(36, 12, 'RESULT', 'RemoteObjects', 129, 'Standard'),
(37, 12, 'FUNCTION', 'generateRandomDeviceId', 0, 'Experte'),
(38, 12, 'FUNCTION', 'reset', 1, 'Standard'),
(39, 12, 'FUNCTION', 'getUnusedMemory', 4, 'Standard'),
(40, 12, 'FUNCTION', 'setConfiguration', 6, 'Experte'),
(41, 12, 'RESULT', 'UnusedMemory', 130, 'Standard'),
(42, 1, 'RESULT', 'Configuration', 128, 'Standard'),
(43, 1, 'EVENT', 'evCovered', 200, 'Experte'),
(44, 1, 'EVENT', 'evFree', 205, 'Experte'),
(45, 9, 'RESULT', 'Configuration', 128, 'Standard'),
(47, 9, 'EVENT', 'evStart', 202, 'Experte'),
(72, 12, 'RESULT', 'MemoryData', 132, 'Entwickler'),
(49, 14, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(82, 14, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(51, 14, 'ACTION', 'moveToPosition', 2, 'Standard'),
(52, 14, 'ACTION', 'start', 3, 'Standard'),
(54, 14, 'ACTION', 'stop', 4, 'Standard'),
(55, 14, 'RESULT', 'Configuration', 128, 'Standard'),
(56, 14, 'EVENT', 'evClosed', 200, 'Experte'),
(57, 14, 'EVENT', 'evStart', 201, 'Experte'),
(62, 8, 'EVENT', 'evOn', 201, 'Experte'),
(83, 12, 'FUNCTION', 'writeRules', 9, 'Entwickler'),
(81, 8, 'RESULT', 'Status', 129, 'Standard'),
(60, 8, 'ACTION', 'on', 3, 'Standard'),
(61, 8, 'ACTION', 'off', 2, 'Standard'),
(63, 8, 'EVENT', 'evOff', 200, 'Experte'),
(64, 9, 'ACTION', 'start', 3, 'Standard'),
(65, 9, 'ACTION', 'stop', 4, 'Standard'),
(66, 12, 'FUNCTION', 'readMemory', 7, 'Entwickler'),
(67, 12, 'FUNCTION', 'writeMemory', 8, 'Entwickler'),
(68, 12, 'FUNCTION', 'ping', 127, 'Standard'),
(69, 12, 'RESULT', 'pong', 199, 'Standard'),
(70, 9, 'FUNCTION', 'getStatus', 5, 'Standard'),
(71, 9, 'RESULT', 'Status', 129, 'Standard'),
(73, 12, 'RESULT', 'MemoryStatus', 133, 'Entwickler'),
(74, 15, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(75, 15, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(76, 15, 'RESULT', 'Configuration', 128, 'Standard'),
(78, 14, 'FUNCTION', 'getStatus', 5, 'Standard'),
(79, 14, 'RESULT', 'Status', 129, 'Standard'),
(84, 12, 'FUNCTION', 'readRules', 10, 'Entwickler'),
(85, 12, 'RESULT', 'RulesData', 134, 'Entwickler'),
(161, 21, 'RESULT', 'Configuration', 128, 'Standard'),
(91, 2, 'RESULT', 'Configuration', 128, 'Standard'),
(92, 2, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(93, 2, 'FUNCTION', 'getStatus', 2, 'Standard'),
(94, 2, 'RESULT', 'Status', 129, 'Standard'),
(98, 18, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(99, 18, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(136, 17, 'ACTION', 'off', 2, 'Standard'),
(101, 18, 'ACTION', 'on', 3, 'Standard'),
(102, 18, 'ACTION', 'blink', 4, 'Standard'),
(103, 18, 'FUNCTION', 'getStatus', 5, 'Standard'),
(104, 18, 'RESULT', 'Configuration', 128, 'Standard'),
(105, 18, 'RESULT', 'Status', 129, 'Standard'),
(106, 18, 'EVENT', 'evOff', 200, 'Experte'),
(107, 18, 'EVENT', 'evOn', 201, 'Experte'),
(108, 18, 'EVENT', 'evBlink', 202, 'Experte'),
(109, 19, 'FUNCTION', 'off', 0, 'Standard'),
(110, 19, 'FUNCTION', 'on', 1, 'Standard'),
(111, 19, 'EVENT', 'evClicked', 202, 'Experte'),
(112, 19, 'EVENT', 'evOff', 200, 'Experte'),
(113, 19, 'EVENT', 'evOn', 201, 'Experte'),
(115, 19, 'EVENT', 'evHoldStart', 203, 'Experte'),
(116, 19, 'EVENT', 'evHoldEnd', 204, 'Experte'),
(143, 12, 'EVENT', 'evError', 255, 'Experte'),
(118, 9, 'EVENT', 'evError', 255, 'Experte'),
(119, 19, 'EVENT', 'evError', 255, 'Experte'),
(120, 18, 'EVENT', 'evError', 255, 'Experte'),
(121, 17, 'EVENT', 'evError', 255, 'Experte'),
(122, 14, 'EVENT', 'evError', 255, 'Experte'),
(123, 8, 'EVENT', 'evError', 255, 'Experte'),
(160, 21, 'ACTION', 'wakeUpDevice', 2, 'Standard'),
(125, 1, 'EVENT', 'evError', 255, 'Experte'),
(126, 15, 'EVENT', 'evError', 255, 'Experte'),
(127, 2, 'EVENT', 'evError', 255, 'Experte'),
(128, 14, 'FUNCTION', 'setPosition', 6, 'Standard'),
(129, 12, 'EVENT', 'evTime', 200, 'Experte'),
(130, 12, 'EVENT', 'evNewDeviceId', 201, 'Experte'),
(131, 12, 'EVENT', 'evStarted', 202, 'Experte'),
(132, 17, 'EVENT', 'evOff', 200, 'Experte'),
(133, 17, 'EVENT', 'evOn', 201, 'Experte'),
(134, 17, 'EVENT', 'evBlink', 202, 'Standard'),
(135, 18, 'ACTION', 'off', 2, 'Standard'),
(137, 17, 'ACTION', 'on', 3, 'Standard'),
(138, 17, 'ACTION', 'blink', 4, 'Standard'),
(139, 17, 'RESULT', 'Status', 129, 'Standard'),
(140, 17, 'FUNCTION', 'getStatus', 5, 'Standard'),
(141, 17, 'FUNCTION', 'setButtonConfiguration', 11, 'Experte'),
(142, 17, 'FUNCTION', 'setLedConfiguration', 12, 'Experte'),
(145, 12, 'FUNCTION', 'getTime', 126, 'Standard'),
(146, 12, 'FUNCTION', 'setTime', 125, 'Experte'),
(147, 12, 'RESULT', 'Time', 198, 'Standard'),
(148, 12, 'FUNCTION', 'getRuleState', 12, 'Experte'),
(149, 12, 'ACTION', 'setRuleState', 11, 'Entwickler'),
(150, 12, 'ACTION', 'triggerRuleElement', 13, 'Entwickler'),
(151, 12, 'RESULT', 'RuleState', 135, 'Experte'),
(152, 20, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(153, 20, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(154, 20, 'ACTION', 'allOff', 2, 'Standard'),
(155, 20, 'ACTION', 'allOn', 3, 'Standard'),
(156, 20, 'FUNCTION', 'sendCommand', 4, 'Experte'),
(157, 20, 'RESULT', 'Configuration', 128, 'Standard'),
(158, 20, 'RESULT', 'Status', 129, 'Standard'),
(159, 20, 'EVENT', 'evError', 255, 'Experte'),
(162, 21, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(163, 21, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(164, 21, 'EVENT', 'evError', 255, 'Experte'),
(176, 12, 'RESULT', 'TriggeredRule', 136, 'Experte'),
(177, 17, 'ACTION', 'setMinBrightness', 6, 'Standard'),
(168, 22, 'EVENT', 'evError', 255, 'Experte'),
(169, 12, 'ACTION', 'setUnitGroupState', 14, 'Entwickler'),
(170, 12, 'EVENT', 'evGroupOn', 203, 'Experte'),
(171, 12, 'EVENT', 'evGroupOff', 205, 'Experte'),
(175, 14, 'EVENT', 'evOpen', 202, 'Experte'),
(174, 12, 'EVENT', 'evGroupUndefined', 204, 'Experte'),
(178, 12, 'FUNCTION', 'setDebugOptions', 124, 'Experte'),
(179, 23, 'EVENT', 'evDry', 200, 'Experte'),
(180, 23, 'EVENT', 'evConfortable', 201, 'Experte'),
(181, 23, 'EVENT', 'evWet', 202, 'Experte'),
(182, 23, 'EVENT', 'evError', 255, 'Experte'),
(183, 23, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(184, 23, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(185, 23, 'FUNCTION', 'getStatus', 2, 'Standard'),
(186, 23, 'RESULT', 'Configuration', 128, 'Standard'),
(187, 23, 'EVENT', 'Status', 129, 'Standard'),
(188, 1, 'ACTION', 'enableEvents', 2, 'Standard'),
(189, 24, 'ACTION', 'exec', 0, 'Standard'),
(190, 12, 'RESULT', 'TimeDifference', 197, 'Entwickler'),
(191, 22, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(192, 22, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(193, 22, 'RESULT', 'Configuration', 128, 'Standard'),
(194, 24, 'ACTION', 'setVariable', 126, 'Standard'),
(195, 12, 'EVENT', 'evDay', 206, 'Experte'),
(196, 12, 'EVENT', 'evNight', 207, 'Experte'),
(197, 12, 'FUNCTION', 'setSunTimes', 15, 'Experte'),
(199, 25, 'RESULT', 'weather', 128, 'Standard'),
(198, 25, 'FUNCTION', 'getWeather', 5, 'Standard'),
(200, 21, 'RESULT', 'CurrentIp', 129, 'Standard'),
(201, 21, 'FUNCTION', 'getCurrentIp', 3, 'Standard'),
(202, 8, 'EVENT', 'evToggle', 202, 'Experte'),
(203, 8, 'RESULT', 'Configuration', 128, 'Standard'),
(204, 8, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(205, 8, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(206, 27, 'EVENT', 'evError', 255, 'Standard'),
(207, 24, 'ACTION', 'shutdown', 11, 'Standard'),
(208, 24, 'ACTION', 'restart', 12, 'Standard'),
(209, 24, 'ACTION', 'quit', 20, 'Standard'),
(210, 1, 'FUNCTION', 'getStatus', 3, 'Standard'),
(211, 1, 'RESULT', 'Status', 129, 'Standard'),
(212, 24, 'EVENT', 'evOnline', 200, 'Standard'),
(214, 24, 'EVENT', 'evOffline', 201, 'Standard'),
(215, 24, 'ACTION', 'standby', 10, 'Standard'),
(216, 27, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(217, 27, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(218, 27, 'ACTION', 'checkBusTiming', 2, 'Experte'),
(219, 27, 'FUNCTION', 'getBusTiming', 3, 'Experte'),
(220, 27, 'RESULT', 'BusTiming', 129, 'Experte'),
(221, 27, 'RESULT', 'Configuration', 128, 'Standard'),
(222, 27, 'ACTION', 'resetBusTiming', 4, 'Standard'),
(223, 27, 'ACTION', 'getConnectedDevices', 5, 'Experte'),
(224, 27, 'RESULT', 'ConnectedDevices', 130, 'Experte'),
(225, 24, 'ACTION', 'reloadUserPlugin', 13, 'Standard'),
(226, 27, 'EVENT', 'evGatewayLoad', 200, 'Standard'),
(227, 28, 'FUNCTION', 'getConfiguration', 0, 'Standard'),
(228, 28, 'FUNCTION', 'setConfiguration', 1, 'Standard'),
(229, 28, 'FUNCTION', 'getValue', 2, 'Standard'),
(230, 28, 'FUNCTION', 'setValue', 3, 'Standard'),
(231, 28, 'RESULT', 'Configuration', 128, 'Standard'),
(232, 28, 'RESULT', 'Value', 129, 'Standard'),
(233, 28, 'EVENT', 'evError', 255, 'Standard'),
(234, 28, 'RESULT', 'Status', 130, 'Standard'),
(236, 30, 'FUNCTION', 'getTime', 0, 'Standard'),
(237, 30, 'FUNCTION', 'setTime', 1, 'Standard'),
(238, 30, 'RESULT', 'Time', 128, 'Standard'),
(239, 30, 'EVENT', 'evError', 255, 'Standard'),
(240, 31, 'FUNCTION', 'setConfiguration', 3, 'Standard'),
(241, 31, 'FUNCTION', 'getConfiguration', 4, 'Standard'),
(242, 31, 'RESULT', 'Configuration', 129, 'Standard'),
(243, 31, 'EVENT', 'evSignal', 200, 'Standard'),
(244, 31, 'FUNCTION', 'getCurrent', 1, 'Standard'),
(245, 31, 'EVENT', 'evCurrent', 201, 'Standard'),
(246, 31, 'RESULT', 'Power', 130, 'Standard'),
(247, 31, 'RESULT', 'Current', 128, 'Standard'),
(248, 31, 'FUNCTION', 'getSignalCount', 6, 'Standard'),
(249, 31, 'RESULT', 'SignalCount', 131, 'Standard'),
(250, 31, 'FUNCTION', 'clearSignalCount', 7, 'Standard'),
(251, 31, 'FUNCTION', 'setSignalCount', 2, 'Standard'),
(252, 31, 'FUNCTION', 'getPower', 5, 'Standard'),
(253, 31, 'FUNCTION', 'incSignalCount', 9, 'Standard'),
(254, 31, 'FUNCTION', 'decSignalCount', 10, 'Standard'),
(255, 31, 'EVENT', 'evDebug', 210, 'Standard'),
(256, 31, 'EVENT', 'evInterrupt', 211, 'Standard'),
(257, 32, 'ACTION', 'announceServer', 1, 'Standard'),
(258, 32, 'FUNCTION', 'getCurrentIp', 2, 'Standard'),
(259, 32, 'RESULT', 'CurrentIp', 128, 'Standard'),
(260, 32, 'EVENT', 'evWhoIsServer', 200, 'Standard'),
(261, 33, 'EVENT', 'evError', 255, 'Standard'),
(262, 33, 'FUNCTION', 'getConfiguration', 0, 'Experte'),
(263, 33, 'ACTION', 'wakeUpDevice', 2, 'Standard'),
(264, 33, 'FUNCTION', 'setConfiguration', 1, 'Experte'),
(265, 33, 'RESULT', 'Configuration', 128, 'Experte'),
(266, 33, 'FUNCTION', 'getCurrentIp', 3, 'Standard'),
(267, 33, 'RESULT', 'CurrentIp', 129, 'Standard'),
(268, 12, 'ACTION', 'setSystemVariable', 16, 'Experte'),
(269, 12, 'FUNCTION', 'getSystemVariable', 17, 'Standard'),
(270, 12, 'RESULT', 'SystemVariable', 137, 'Standard');

--
-- Indizes der exportierten Tabellen
--

--
-- Indizes f端r die Tabelle `featureclasses`
--
ALTER TABLE `featureclasses`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `name` (`name`);

--
-- Indizes f端r die Tabelle `featurefunctionbitmasks`
--
ALTER TABLE `featurefunctionbitmasks`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `paramId` (`paramId`),
  ADD KEY `featureFunctionId` (`featureFunctionId`);

--
-- Indizes f端r die Tabelle `featurefunctionenums`
--
ALTER TABLE `featurefunctionenums`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `paramId` (`paramId`),
  ADD KEY `featureFunctionId` (`featureFunctionId`);

--
-- Indizes f端r die Tabelle `featurefunctionparams`
--
ALTER TABLE `featurefunctionparams`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `featureFunctionId` (`featureFunctionId`);

--
-- Indizes f端r die Tabelle `featurefunctions`
--
ALTER TABLE `featurefunctions`
  ADD UNIQUE KEY `id` (`id`),
  ADD KEY `functionId` (`functionId`),
  ADD KEY `featureClassesId` (`featureClassesId`);

--
-- AUTO_INCREMENT f端r exportierte Tabellen
--

--
-- AUTO_INCREMENT f端r Tabelle `featureclasses`
--
ALTER TABLE `featureclasses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=34;
--
-- AUTO_INCREMENT f端r Tabelle `featurefunctionbitmasks`
--
ALTER TABLE `featurefunctionbitmasks`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=297;
--
-- AUTO_INCREMENT f端r Tabelle `featurefunctionenums`
--
ALTER TABLE `featurefunctionenums`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=747;
--
-- AUTO_INCREMENT f端r Tabelle `featurefunctionparams`
--
ALTER TABLE `featurefunctionparams`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=556;
--
-- AUTO_INCREMENT f端r Tabelle `featurefunctions`
--
ALTER TABLE `featurefunctions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=271;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
